/* 
 * FORM ELEMENTS STYLING
 * Consistent styling for form elements across the application
 * These styles extend Tailwind's base form styling and apply our theme variables
 */

/* 
 * GLOBAL INPUT STYLING
 * Base styles for all input elements using theme variables
 */
/* REMOVED: GLOBAL INPUT STYLING (input, select, textarea base styles)
   Shadcn/ui components (Input, Select, Textarea) define their own comprehensive styling
   using Tailwind utilities and CSS variables. Global overrides here conflict or are redundant.
   Specific needs like `bg-input` or custom shadows should be addressed in those components'
   base definitions if a global change is desired, or applied as variants. */

/* 
 * FOCUS STATES
 * Custom focus styles that maintain consistent appearance
 * The border changes color while base.css handles the focus ring/outline
 */
/* REMOVED: FOCUS STATES (input:focus, select:focus, textarea:focus)
   Shadcn/ui components provide accessible and themed focus styling (e.g., focus-visible:ring-ring).
   These global overrides are simpler and can conflict with the richer Shadcn focus visuals. */

/* REMOVED: Special focus styling for .settings-input as the class was not found to be in use. */

/* Helper text below inputs */
/* KEPT (for now): Utility class for helper text. Consider replacing with direct Tailwind utilities if usage is sparse. */
.input-helper-text {
  @apply text-xs text-muted-foreground mt-1;
}

/* 
 * TOGGLE SWITCH STYLING
 * Custom styling for toggle switches in both light and dark modes
 */
/* TODO: Analyze if these are still needed given Switch.tsx refactor. Assumed removed for now if covered by Switch component. */

/* 
 * ERROR HANDLING STYLES
 * Consistent error styling across all form components
 */

/* Common error message class - defined in globals.css */
/* .form-error-message { */ /* Assuming this is styled in globals.css as commented */
  /* Styles defined in globals.css */
/* } */

/* Invalid input highlighting */
/* KEPT: Good global rule for accessibility and UX. Complements Shadcn components. */
[aria-invalid="true"],
[data-invalid="true"] {
  border-color: hsl(var(--destructive));
}

/* 
 * ERROR ICON STYLING
 * These selectors target error icons that appear next to invalid inputs
 * Uses multiple selector patterns to catch different component structures
 */
/* KEPT: Good global rules for error icon consistency. */
[aria-invalid="true"] ~ svg,
[aria-invalid="true"] + svg,
[data-invalid="true"] ~ svg,
[data-error="true"] svg,
svg.text-destructive {
  color: hsl(var(--destructive));
}

/*
 * DROPDOWN AND SELECT STYLING
 */
/* REMOVED: Rules for [data-radix-select-content], [data-radix-popper-content-wrapper] (position:fixed, z-index, opacity).
   Shadcn Select/Dropdown components manage their own positioning (typically via Popper) and z-index (e.g., z-50).
   Forcing position:fixed and !important opacity globally is problematic. */

/* REMOVED: Rules for [data-radix-select-viewport] (max-height, overflow, padding).
   Shadcn Select component's Viewport has its own Tailwind styling. Specific needs should be in select.tsx. */

/* REMOVED: Rules for [data-radix-select-item], [role="option"] hover states (bg-primary).
   Shadcn SelectItem defines its own hover/focus states (typically bg-accent). This CSS conflicts. */

/* REMOVED: Rules for [data-radix-select-portal] (position:fixed, z-index).
   Radix handles portal mechanics. Overriding portal styles globally is risky. */

/* REMOVED: Rules for THEME-SPECIFIC DROPDOWN HOVER STATES and CUSTOM SELECT COMPONENT STYLING (.select-dropdown-item).
   These are redundant with previous removals or target unused custom classes. SelectItem styling is in select.tsx. */

/* REMOVED: SELECTED ITEM STYLING ([data-radix-select-item][data-state="checked"]).
   Styling for selected items (background, text color, check icon color) should be encapsulated
   within the shadcn SelectItem component in select.tsx. Global overrides here are not ideal. */ 
