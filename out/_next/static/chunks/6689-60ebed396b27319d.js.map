{"version":3,"file":"static/chunks/6689-60ebed396b27319d.js","mappings":"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","sources":["webpack://_N_E/./src/lib/translation.ts","webpack://_N_E/./src/translations.ts","webpack://_N_E/./src/lib/utils.ts","webpack://_N_E/./src/components/translation-provider.tsx"],"sourcesContent":["/**\r\n * Simple, direct translation system with zero eval() usage\r\n */\r\n\r\nimport { TranslationContext } from '../components/translation-provider';\r\nimport deTranslations from '../messages/de.json';\r\nimport enTranslations from '../messages/en.json';\r\nimport { safeText } from './utils';\r\nimport { useContext } from 'react';\r\n\r\n// Type safety for translation objects\r\ntype TranslationResource = Record<string, string | Record<string, string>>;\r\ntype NestedTranslations = Record<string, TranslationResource>;\r\n\r\ninterface TranslationOptions {\r\n  defaultValue?: string;\r\n  values?: Record<string, string | number>;\r\n}\r\n\r\n// Translations store\r\nconst translations: Record<string, NestedTranslations> = {\r\n  en: { translation: enTranslations as TranslationResource },\r\n  de: { translation: deTranslations as TranslationResource },\r\n};\r\n\r\n// Current language state\r\nlet currentLanguage = 'en';\r\nconst STORAGE_KEY = 'billingperiodallocator-language';\r\n\r\n// Language detection at initialization\r\nif (typeof window !== 'undefined') {\r\n  // Try to get language from URL path\r\n  const pathSegments = window.location.pathname.split('/');\r\n  const urlLang = pathSegments.length > 1 && ['en', 'de'].includes(pathSegments[1]) \r\n                ? pathSegments[1] \r\n                : null;\r\n  \r\n  // If not in URL, check localStorage, then browser preference\r\n  currentLanguage = urlLang || \r\n                  localStorage.getItem(STORAGE_KEY) || \r\n                  (navigator.language && \r\n                  ['en', 'de'].includes(navigator.language.substring(0, 2).toLowerCase())\r\n                    ? navigator.language.substring(0, 2).toLowerCase()\r\n                    : 'en');\r\n}\r\n\r\n/**\r\n * Get a translated string with NO eval\r\n * Compatible with i18next API - accepts either options object or defaultValue string\r\n */\r\nexport function t(key: string, optionsOrDefaultValue?: TranslationOptions | string): string {\r\n  let options: TranslationOptions = {};\r\n  \r\n  // Handle i18next compatibility where second param can be defaultValue string\r\n  if (typeof optionsOrDefaultValue === 'string') {\r\n    options = { defaultValue: optionsOrDefaultValue };\r\n  } else if (optionsOrDefaultValue) {\r\n    options = optionsOrDefaultValue;\r\n  }\r\n  \r\n  // Get the translation or default value\r\n  const translation = getTranslation(key, currentLanguage);\r\n  \r\n  // Ensure we always have a string, not an object (prevents React Error #418)\r\n  const finalText = safeText(translation || options.defaultValue || key);\r\n  \r\n  // Replace any {{key}} values\r\n  if (options.values && Object.keys(options.values).length > 0) {\r\n    return replaceValues(finalText, options.values);\r\n  }\r\n  \r\n  return finalText;\r\n}\r\n\r\n/**\r\n * Change the current language\r\n */\r\nexport function changeLanguage(lang: string): void {\r\n  if (lang === currentLanguage) return;\r\n  \r\n  // Only allow supported languages\r\n  if (!['en', 'de'].includes(lang)) return;\r\n  \r\n  currentLanguage = lang;\r\n  \r\n  // Save to localStorage\r\n  if (typeof window !== 'undefined') {\r\n    localStorage.setItem(STORAGE_KEY, lang);\r\n    document.documentElement.lang = lang;\r\n    \r\n    // Dispatch event for components to know language changed\r\n    const event = new CustomEvent('languageChanged', { detail: { language: lang } });\r\n    document.dispatchEvent(event);\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current language\r\n */\r\nexport function getLanguage(): string {\r\n  return currentLanguage;\r\n}\r\n\r\n/**\r\n * Get a translation from the nested structure with dot notation\r\n * This is a safer implementation without eval()\r\n */\r\nfunction getTranslation(key: string, lang: string): string | undefined {\r\n  // Get correct namespace\r\n  const namespace = 'translation'; // We only use a single namespace\r\n  const resource = translations[lang]?.[namespace];\r\n  \r\n  if (!resource) return undefined;\r\n  \r\n  // Handle dot notation (e.g., \"header.title\")\r\n  const parts = key.split('.');\r\n  let current: unknown = resource;\r\n  \r\n  // Navigate down the object path\r\n  for (const part of parts) {\r\n    if (current === undefined || current === null || typeof current !== 'object') {\r\n      return undefined;\r\n    }\r\n    \r\n    // Type assertion since we've checked current is an object\r\n    current = (current as Record<string, unknown>)[part];\r\n  }\r\n  \r\n  // Return the found string or undefined - but ensure it's a string\r\n  return typeof current === 'string' ? current : undefined;\r\n}\r\n\r\n/**\r\n * Replace {{key}} placeholders in a string with values\r\n */\r\nfunction replaceValues(text: string, values: Record<string, string | number>): string {\r\n  return text.replace(/\\{\\{([^{}]+)\\}\\}/g, (match, key) => {\r\n    const replacement = values[key.trim()];\r\n    // Ensure replacement is always a string\r\n    return replacement !== undefined ? safeText(replacement) : match;\r\n  });\r\n}\r\n\r\n// Helper function to extract language from URL path\r\nexport function getLanguageFromPath(path: string): string | null {\r\n  if (!path) return null;\r\n  \r\n  const segments = path.split('/');\r\n  if (segments.length > 1 && ['en', 'de'].includes(segments[1])) {\r\n    return segments[1];\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// Simple functions to mimic i18next interface for easier migration\r\nexport const i18n = {\r\n  changeLanguage,\r\n  language: currentLanguage,\r\n  t\r\n};\r\n\r\n// Export a hook-like function for React components\r\nexport function useTranslation() {\r\n  const { language, t: contextT, changeLanguage: contextChangeLanguage } = useContext(TranslationContext);\r\n\r\n  // The t function from context already uses the correct language.\r\n  // The changeLanguage function from context will update the provider and global state.\r\n  return { \r\n    t: contextT,\r\n    i18n: {\r\n      language: language, // Use language from context\r\n      changeLanguage: contextChangeLanguage // Use changeLanguage from context\r\n    }\r\n  };\r\n}\r\n\r\n// New function for Server Components\r\nexport function getServerSideTranslator(lang: string) {\r\n  if (!['en', 'de'].includes(lang)) {\r\n    // Default to 'en' or throw an error if an unsupported language is passed\r\n    // console.warn(`Unsupported language \"${lang}\" for getServerSideTranslator, defaulting to 'en'.`);\r\n    lang = 'en'; \r\n  }\r\n\r\n  return {\r\n    t: (key: string, optionsOrDefaultValue?: TranslationOptions | string): string => {\r\n      let options: TranslationOptions = {};\r\n      if (typeof optionsOrDefaultValue === 'string') {\r\n        options = { defaultValue: optionsOrDefaultValue };\r\n      } else if (optionsOrDefaultValue) {\r\n        options = optionsOrDefaultValue;\r\n      }\r\n\r\n      const translation = getTranslation(key, lang); // Use the passed 'lang'\r\n      const finalText = safeText(translation || options.defaultValue || key);\r\n\r\n      if (options.values && Object.keys(options.values).length > 0) {\r\n        return replaceValues(finalText, options.values);\r\n      }\r\n      return finalText;\r\n    },\r\n    // Optionally, expose the language if needed by the server component\r\n    // language: lang \r\n  };\r\n} \r\n ","/**\r\n * Translation system entry point - 100% eval-free\r\n * This file replaces i18n-client.ts with a simpler implementation\r\n */\r\n\r\nimport { getLanguage } from './lib/translation';\r\n\r\nexport { \r\n  t,\r\n  i18n,\r\n  useTranslation,\r\n  changeLanguage,\r\n  getLanguage,\r\n  getLanguageFromPath\r\n} from './lib/translation';\r\n\r\n// Constants exported for backward compatibility with existing code\r\nexport const LANGUAGE_STORAGE_KEY = 'billingperiodallocator-language';\r\nexport const DEFAULT_LANGUAGE = 'en';\r\nexport const SUPPORTED_LANGUAGES = ['en', 'de'];\r\n\r\n// For backward compatibility with existing code\r\nexport const getCurrentLanguage = getLanguage; \r\n ","import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Safely converts any value to a string to prevent React error #418\r\n * This helps when displaying dynamic content that might be objects\r\n */\r\nexport function safeText(value: unknown): string {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n  \r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  \r\n  if (typeof value === 'object') {\r\n    try {\r\n      return JSON.stringify(value);\r\n    } catch {\r\n      return '[Object]';\r\n    }\r\n  }\r\n  \r\n  return String(value);\r\n}\r\n","'use client';\r\n\r\nimport React, { createContext, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n  getLanguage as getGlobalLanguage,\r\n  getLanguageFromPath,\r\n  changeLanguage as globalChangeLanguage,\r\n  t as globalT,\r\n} from '@/translations';\r\n\r\nimport { usePathname } from 'next/navigation';\r\n\r\n// Define the shape of the context value\r\ninterface ITranslationContext {\r\n  language: string;\r\n  t: typeof globalT;\r\n  changeLanguage: typeof globalChangeLanguage;\r\n}\r\n\r\n// Define default values that don't call back into '@/translations' at module initialization time.\r\n// These are placeholders for when context is used outside a provider or during problematic init.\r\nconst defaultContextValue: ITranslationContext = {\r\n  language: 'en', // Sensible hardcoded default\r\n  t: (key: string, optionsOrDefaultValue?: Parameters<typeof globalT>[1]): string => {\r\n    // Basic fallback t function.\r\n    // It uses Parameters<typeof globalT>[1] to match the type of optionsOrDefaultValue.\r\n    const optionsAsObject = typeof optionsOrDefaultValue === 'object' ? optionsOrDefaultValue : undefined;\r\n    const defaultValueAsString = typeof optionsOrDefaultValue === 'string' ? optionsOrDefaultValue : undefined;\r\n\r\n    if (optionsAsObject?.defaultValue) {\r\n      return optionsAsObject.defaultValue;\r\n    }\r\n    if (defaultValueAsString) {\r\n      return defaultValueAsString;\r\n    }\r\n    return key; // Fallback to key\r\n  },\r\n  changeLanguage: (lang: string): void => {\r\n    // Basic no-op changeLanguage, with a warning if on client.\r\n    if (typeof document !== 'undefined') { // Check if running on the client\r\n      console.warn(\r\n        `Language change to \"${lang}\" attempted using default translation context. ` +\r\n        `Ensure TranslationProvider is correctly wrapping your application.`\r\n      );\r\n    }\r\n  },\r\n};\r\n\r\n// Initialize context with safe default values.\r\nexport const TranslationContext = createContext<ITranslationContext>(defaultContextValue);\r\n\r\nexport default function TranslationProvider({ children }: { children: React.ReactNode }) {\r\n  const pathname = usePathname();\r\n  // State to hold the language for this provider instance.\r\n  // Initialize with the current global language.\r\n  const [contextLang, setContextLang] = useState(() => getGlobalLanguage());\r\n\r\n  useEffect(() => {\r\n    // This effect syncs the provider's language state with the URL path.\r\n    const pathLanguage = getLanguageFromPath(pathname || '');\r\n    if (pathLanguage && pathLanguage !== getGlobalLanguage()) {\r\n      // If path language is different from current global, change global\r\n      // This will also trigger the 'languageChanged' event\r\n      globalChangeLanguage(pathLanguage);\r\n      // The event listener below will pick this up and setContextLang\r\n    } else if (pathLanguage && pathLanguage !== contextLang) {\r\n      // If path language is different from our context state (but global might be same or changing)\r\n      // directly update our context state.\r\n      setContextLang(pathLanguage);\r\n      if (typeof document !== 'undefined') document.documentElement.lang = pathLanguage;\r\n    } else if (!pathLanguage && getGlobalLanguage() !== contextLang) {\r\n      // If no language in path (e.g. root, though not used in this app)\r\n      // and our context state differs from global, sync to global.\r\n      const globLang = getGlobalLanguage();\r\n      setContextLang(globLang);\r\n      if (typeof document !== 'undefined') document.documentElement.lang = globLang;\r\n    }\r\n  }, [pathname, contextLang]); // Re-run if path changes or our own contextLang changes\r\n\r\n  useEffect(() => {\r\n    // This effect listens for the global 'languageChanged' event.\r\n    // This event is dispatched by globalChangeLanguage.\r\n    const handleGlobalLanguageChange = () => {\r\n      const newGlobalLang = getGlobalLanguage();\r\n      if (newGlobalLang !== contextLang) {\r\n        setContextLang(newGlobalLang); // Update provider's state\r\n        if (typeof document !== 'undefined') document.documentElement.lang = newGlobalLang;\r\n      }\r\n    };\r\n\r\n    if (typeof document !== 'undefined') {\r\n        document.addEventListener('languageChanged', handleGlobalLanguageChange);\r\n    }\r\n    return () => {\r\n      if (typeof document !== 'undefined') {\r\n        document.removeEventListener('languageChanged', handleGlobalLanguageChange);\r\n      }\r\n    };\r\n  }, [contextLang]); // Re-subscribe if contextLang changes\r\n\r\n  // Memoize the context value. This object reference will change if contextLang changes.\r\n  const providerValue = useMemo(() => ({\r\n    language: contextLang,\r\n    t: globalT, // globalT always uses the module-level 'currentLanguage'\r\n                 // which is updated by globalChangeLanguage.\r\n    changeLanguage: globalChangeLanguage,\r\n  }), [contextLang]);\r\n\r\n  return (\r\n    <TranslationContext.Provider value={providerValue}>\r\n      {children}\r\n    </TranslationContext.Provider>\r\n  );\r\n} \r\n "],"names":["translations","en","translation","enTranslations","de","deTranslations","currentLanguage","STORAGE_KEY","pathSegments","window","location","pathname","split","urlLang","length","includes","localStorage","getItem","navigator","language","substring","toLowerCase","t","key","optionsOrDefaultValue","options","defaultValue","getTranslation","lang","resource","namespace","undefined","parts","current","part","finalText","safeText","values","Object","keys","replaceValues","text","replace","match","replacement","trim","changeLanguage","setItem","document","documentElement","event","CustomEvent","detail","dispatchEvent","getLanguage","getLanguageFromPath","path","segments","useTranslation","contextT","contextChangeLanguage","useContext","TranslationContext","i18n","LANGUAGE_STORAGE_KEY","cn","inputs","twMerge","clsx","value","JSON","stringify","String","createContext","optionsAsObject","defaultValueAsString","console","warn","TranslationProvider","children","usePathname","contextLang","setContextLang","useState","getGlobalLanguage","useEffect","pathLanguage","globalChangeLanguage","globLang","handleGlobalLanguageChange","newGlobalLang","addEventListener","removeEventListener","providerValue","useMemo","globalT","Provider"],"sourceRoot":""}