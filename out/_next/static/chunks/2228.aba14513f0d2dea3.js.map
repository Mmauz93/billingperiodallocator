{"version":3,"file":"static/chunks/2228.aba14513f0d2dea3.js","mappings":"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","sources":["webpack://_N_E/./src/components/ui/switch.tsx","webpack://_N_E/./src/components/ui/popover.tsx","webpack://_N_E/./src/components/ui/calendar.tsx","webpack://_N_E/./src/components/invoice-form.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Switch = React.forwardRef<\r\n  React.ElementRef<typeof SwitchPrimitives.Root>,\r\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <SwitchPrimitives.Root\r\n    className={cn(\r\n      \"peer inline-flex h-[22px] w-[42px] shrink-0 cursor-pointer items-center rounded-sm border-0 transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input dark:data-[state=unchecked]:bg-slate-700\",\r\n      \"rounded-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  >\r\n    <SwitchPrimitives.Thumb\r\n      className={cn(\r\n        \"pointer-events-none block h-[18px] w-[18px] rounded-xs bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-[19px] data-[state=unchecked]:translate-x-[3px]\"\r\n      )}\r\n    />\r\n  </SwitchPrimitives.Root>\r\n))\r\nSwitch.displayName = SwitchPrimitives.Root.displayName\r\n\r\nexport { Switch } \r\n","\"use client\";\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  const [isMounted, setIsMounted] = React.useState(false);\n  const isMountedRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    const mountTimer = setTimeout(() => {\n      if (isMountedRef.current) {\n        setIsMounted(true);\n      }\n    }, 10); // Small delay for mount animation\n\n    return () => {\n      isMountedRef.current = false;\n      clearTimeout(mountTimer);\n      // Immediately set isMounted to false to trigger clean removal\n      setIsMounted(false);\n      \n      // Make sure we clean up any portals that might still be in the DOM\n      if (typeof document !== 'undefined') {\n        // Give React a chance to unmount naturally before we force cleanup\n        setTimeout(() => {\n          // Find any orphaned popover elements and remove them\n          document.querySelectorAll('[data-radix-popover-content]').forEach(element => {\n            try {\n              if (element && element.parentNode) {\n                element.parentNode.removeChild(element);\n              }\n            } catch /* (error) */ {\n              // Silently handle any errors during forced cleanup\n            }\n          });\n        }, 0);\n      }\n    };\n  }, []);\n\n  if (!isMounted) {\n    return null; // Render nothing until mounted or after unmount\n  }\n\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className,\n        )}\n        style={{ backgroundColor: 'hsl(var(--popover))', opacity: 1 }}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  );\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\n","\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\n\r\nimport { DayPicker } from \"react-day-picker\";\r\nimport { Locale } from \"date-fns\";\r\nimport { buttonVariants } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker> & {\r\n  locale?: Locale;\r\n};\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  locale,\r\n  ...props\r\n}: CalendarProps) {\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn(\"p-3\", className)}\r\n      classNames={{\r\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\r\n        month: \"space-y-4\",\r\n        caption: \"flex justify-center pt-1 relative items-center\",\r\n        caption_label: \"text-sm font-medium\",\r\n        nav: \"space-x-1 flex items-center\",\r\n        nav_button: cn(\r\n          buttonVariants({ variant: \"outline\" }),\r\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\r\n        ),\r\n        nav_button_previous: \"absolute left-1\",\r\n        nav_button_next: \"absolute right-1\",\r\n        month_grid: \"w-full border-collapse space-y-1\",\r\n        weekdays: \"flex\",\r\n        weekday:\r\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\r\n        week: \"flex w-full mt-2\",\r\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\r\n        day: cn(\r\n          buttonVariants({ variant: \"ghost\" }),\r\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100 hover:!bg-primary hover:!text-primary-foreground dark:hover:!bg-primary dark:hover:!text-primary-foreground transition-colors duration-200 active:scale-95 active:ring-1 active:ring-primary/50\",\r\n        ),\r\n        day_range_end: \"day-range-end\",\r\n        day_selected:\r\n          \"bg-primary text-primary-foreground hover:!bg-primary hover:!text-primary-foreground focus:bg-primary focus:text-primary-foreground active:scale-95\",\r\n        day_today: \"bg-accent text-accent-foreground hover:!bg-primary hover:!text-primary-foreground active:scale-95\",\r\n        day_outside:\r\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30 hover:!bg-primary/50 hover:!text-primary-foreground active:scale-95\",\r\n        day_disabled: \"text-muted-foreground opacity-50\",\r\n        day_range_middle:\r\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\r\n        day_hidden: \"invisible\",\r\n        ...classNames,\r\n      }}\r\n      components={{\r\n        Chevron: ({ className, orientation, ...props }) =>\r\n          orientation === \"left\" ? (\r\n            <ChevronLeft className={cn(className, \"h-4 w-4\")} {...props} />\r\n          ) : (\r\n            <ChevronRight className={cn(className, \"h-4 w-4\")} {...props} />\r\n          ),\r\n      }}\r\n      locale={locale}\r\n      weekStartsOn={locale?.options?.weekStartsOn ?? 1}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nCalendar.displayName = \"Calendar\";\r\n\r\nexport { Calendar };\r\n","\"use client\";\n\nimport { AlertCircle, CalendarIcon, CheckCircle, Loader2, PlusCircle, XCircle } from \"lucide-react\";\nimport { CalculationError, CalculationInput, CalculationResult, ERROR_CODES, InputValidationError, calculateInvoiceSplit } from \"@/lib/calculations\";\nimport {\n    FormControl,\n    FormDescription,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage,\n} from \"@/components/ui/form\";\nimport { FormProvider, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { de, enUS } from 'date-fns/locale';\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Input } from \"@/components/ui/input\";\nimport React from \"react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { cn } from \"@/lib/utils\";\nimport { debounce } from 'lodash';\nimport { format } from \"date-fns\";\nimport { parseDate } from \"@/lib/date-utils\";\nimport { useTranslation } from '@/translations';\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\n// Constants for date formats\nconst DATE_FORMAT_ISO = \"yyyy-MM-dd\";\nconst DATE_FORMAT_DE = \"dd.MM.yyyy\";\nconst DATE_FORMAT_US = \"MM/dd/yyyy\";\nconst DATE_FORMAT_DOTS = \"dd.MM.yy\";\nconst DATE_FORMAT_SLASHES = \"MM/dd/yy\";\nconst DATE_FORMAT_DASHES = \"dd-MM-yyyy\";\n\n// Define a constant for default form values\nconst DEFAULT_FORM_VALUES: FormSchemaType = {\n    startDateString: '',\n    endDateString: '',\n    includeEndDate: true,\n    splitPeriod: 'yearly' as const,\n    amounts: [{ value: '' }]\n};\n\n// List of all supported date formats for parsing\nconst supportedDateFormats = [\n    DATE_FORMAT_ISO,\n    DATE_FORMAT_DE,\n    DATE_FORMAT_US,\n    DATE_FORMAT_DOTS,\n    DATE_FORMAT_SLASHES,\n    DATE_FORMAT_DASHES\n];\n\n// Function to try parsing a date string with multiple formats\nconst tryParseDate = (value: string): Date | null => {\n    if (!value) return null;\n\n    // Use our new parseDate function that handles timezone consistently\n    return parseDate(value, supportedDateFormats);\n};\n\n// Update CalculationInput type to include splitPeriod\ndeclare module '@/lib/calculations' {\n    interface CalculationInput {\n        splitPeriod?: 'yearly' | 'quarterly' | 'monthly';\n    }\n}\n\n// Update the error type definition to match invoice-calculator-client.tsx\ntype CalculationErrorType = string | Error | CalculationError | { message?: string; [key: string]: unknown } | null | undefined;\n\n// Schema for form validation\nconst formSchema = (t: ReturnType<typeof useTranslation>['t']) => z\n    .object({\n        startDateString: z.string().optional(),\n        endDateString: z.string().optional(),\n        includeEndDate: z.boolean(),\n        splitPeriod: z.enum(['yearly', 'quarterly', 'monthly']),\n        amounts: z.array(z.object({\n            value: z.string()\n                .min(1, { message: t('InvoiceForm.errorAmountValueRequired') })\n                .refine((val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0, {\n                    message: t('InvoiceForm.errorAmountPositive'),\n                })\n        })).min(1, t('InvoiceForm.errorAmountRequired'))\n    })\n    .refine((data) => {\n        const startDate = tryParseDate(data.startDateString || '');\n        return !!startDate;\n    }, {\n        message: t('InvoiceForm.errorStartDateRequired'),\n        path: [\"startDateString\"],\n    })\n    .refine((data) => {\n        const endDate = tryParseDate(data.endDateString || '');\n        return !!endDate;\n    }, {\n        message: t('InvoiceForm.errorEndDateRequired'),\n        path: [\"endDateString\"],\n    })\n    .refine((data) => {\n        const startDate = tryParseDate(data.startDateString || '');\n        const endDate = tryParseDate(data.endDateString || '');\n        return !startDate || !endDate || endDate >= startDate;\n    }, {\n        message: t('InvoiceForm.errorEndDateBeforeStart'),\n        path: [\"endDateString\"],\n    });\n\n// Form data type\ntype FormSchemaType = z.infer<ReturnType<typeof formSchema>>;\n\n// Data passed back to parent on calculation\nexport type CalculationCallbackData = {\n    startDate: Date;\n    endDate: Date;\n    includeEndDate: boolean;\n    splitPeriod: 'yearly' | 'quarterly' | 'monthly';\n    amounts: number[];\n} | null;\n\n// Type definition for demo data\ntype DemoDataType = {\n  startDateString?: string;\n  endDateString?: string;\n  amount?: string;\n  includeEndDate?: boolean;\n  splitPeriod?: 'yearly' | 'quarterly' | 'monthly';\n  isDemo?: boolean;\n} | null;\n\ninterface InvoiceFormProps {\n    onCalculateAction: (formData: CalculationCallbackData, results: CalculationResult | null, error?: CalculationErrorType) => void;\n    initialDemoData?: DemoDataType | null;\n    onDemoDataApplied?: () => void;\n}\n\nexport function InvoiceForm({ \n    onCalculateAction, \n    initialDemoData,\n    onDemoDataApplied \n}: InvoiceFormProps) {\n    const { t, i18n } = useTranslation();\n    const [mounted, setMounted] = useState(false);\n    const [isCalculating, setIsCalculating] = useState(false);\n    const [buttonText, setButtonText] = useState('');\n    const [showSuccessGlow, setShowSuccessGlow] = useState(false);\n    const initRef = useRef(false);\n\n    const currentLocale = i18n.language.startsWith('de') ? de : enUS;\n    const displayDateFormat = i18n.language.startsWith('de') ? DATE_FORMAT_DE : DATE_FORMAT_ISO;\n    const dateExamplePlaceholder = i18n.language.startsWith('de') ? 'z.B. 31.12.2023' : 'e.g. 2023-12-31';\n    const storageKey = 'invoiceFormDataCache';\n    \n    // State for popover visibility\n    const [isStartDatePopoverOpen, setIsStartDatePopoverOpen] = useState(false);\n    const [isEndDatePopoverOpen, setIsEndDatePopoverOpen] = useState(false);\n\n    const currentFormSchema = formSchema(t);\n    const form = useForm<FormSchemaType>({\n        resolver: zodResolver(currentFormSchema),\n        defaultValues: DEFAULT_FORM_VALUES,\n        mode: \"onBlur\",\n    });\n\n    const { fields, append, remove } = useFieldArray({\n        control: form.control,\n        name: \"amounts\"\n    });\n\n    // Debounced function to save data to localStorage\n    const debouncedSaveFunction = useMemo(\n        () => debounce((dataToSave: FormSchemaType) => {\n            if (mounted && initRef.current) {\n                try {\n                    // Ensure amounts is properly formatted\n                    const amountsToSave = dataToSave.amounts?.length > 0\n                        ? dataToSave.amounts\n                        : [{ value: '' }];\n                    \n                    // Format and prepare the data for saving\n                    const saveData = { \n                        ...dataToSave, \n                        amounts: amountsToSave,\n                        // Ensure valid splitPeriod\n                        splitPeriod: dataToSave.splitPeriod || 'yearly'\n                    };\n                    \n                    // Log and save data to localStorage\n                    console.log(\"[InvoiceForm] Saving form data to localStorage\");\n                    localStorage.setItem(storageKey, JSON.stringify(saveData));\n                } catch (error) {\n                    console.error(\"[InvoiceForm] Failed to save form data to localStorage:\", error);\n                }\n            }\n        }, 800), // Increased debounce to reduce storage operations\n        [mounted, storageKey] // Add the storage key and mounted flag as dependencies\n    );\n    \n    // Only watch for form value changes to trigger saves when needed\n    const formValues = useWatch({ control: form.control });\n    \n    // Effect to trigger debounced save when form values change\n    useEffect(() => {\n        // Skip saving during initial render or when component is not mounted\n        if (!mounted || !initRef.current) {\n            return;\n        }\n        \n        // Only save if we have real form values\n        if (formValues) {\n            debouncedSaveFunction(form.getValues());\n        }\n    }, [formValues, debouncedSaveFunction, form, mounted, initRef]);\n\n    // Cleanup function in a separate effect\n    useEffect(() => {\n        return () => {\n            // Cancel any pending save operations\n            debouncedSaveFunction.cancel();\n            \n            // Close any open popovers to ensure proper cleanup\n            setIsStartDatePopoverOpen(false);\n            setIsEndDatePopoverOpen(false);\n            \n            console.log(\"[InvoiceForm] Component unmounting, cancelled pending save operations.\");\n            // DO NOT set mounted=false here, as it will cause re-renders in StrictMode\n        };\n    }, [debouncedSaveFunction]);\n\n    const onSubmit = useCallback((values: FormSchemaType) => {\n        setIsCalculating(true);\n        setButtonText(t('InvoiceForm.calculatingButton'));\n        const startDate = tryParseDate(values.startDateString || '');\n        const endDate = tryParseDate(values.endDateString || '');\n\n        // Prepare callbackFormData early, ensure amounts are parsed.\n        // Schema validation should ensure amounts are valid numbers, but parseFloat is still needed.\n        const parsedAmounts = values.amounts.map(a => parseFloat(a.value));\n\n        const callbackFormData: CalculationCallbackData = {\n            startDate: startDate!, // Will be checked for null below\n            endDate: endDate!,   // Will be checked for null below\n            includeEndDate: values.includeEndDate,\n            splitPeriod: values.splitPeriod,\n            amounts: parsedAmounts.filter(a => !isNaN(a)) // Use only validly parsed amounts for the callback\n        };\n\n        if (!startDate || !endDate) {\n            const error = new InputValidationError(\n                t('InvoiceForm.errorInvalidDatesMessages', { defaultValue: 'Valid start and end dates are required.' }),\n                ERROR_CODES.INVALID_DATES,\n                {\n                    startDateString: values.startDateString,\n                    endDateString: values.endDateString\n                }\n            );\n            onCalculateAction(callbackFormData, null, error);\n            setIsCalculating(false);\n            setButtonText(t('InvoiceForm.calculateButton', { defaultValue: 'Calculate Split' }));\n            return;\n        }\n        \n        // Additional check for NaN amounts after parseFloat, though schema should catch most.\n        if (parsedAmounts.some(isNaN)) {\n             const error = new InputValidationError(\n                t('InvoiceForm.errorAmountPositive'), \n                ERROR_CODES.INVALID_AMOUNT, \n                { invalidAmounts: values.amounts.filter(a => isNaN(parseFloat(a.value))).map(a => a.value) }\n            );\n            // Pass amounts that were attempted, even if some failed parsing, for callback context\n            onCalculateAction(callbackFormData, null, error);\n            setIsCalculating(false);\n            setButtonText(t('InvoiceForm.calculateButton', { defaultValue: 'Calculate Split' }));\n            return;\n        }\n\n        const inputData: CalculationInput = {\n            startDate, // Already confirmed not null\n            endDate,   // Already confirmed not null\n            includeEndDate: values.includeEndDate,\n            splitPeriod: values.splitPeriod,\n            amounts: parsedAmounts, // Use the successfully parsed amounts\n        };\n\n        // Call the refactored calculateInvoiceSplit\n        const result = calculateInvoiceSplit(inputData);\n\n        if (result.success) {\n            // Success case: result is CalculateInvoiceSplitSuccess\n            // Construct the CalculationResult object for the callback\n            const successResultForCallback: CalculationResult = {\n                totalDays: result.totalDays,\n                originalTotalAmount: result.originalTotalAmount,\n                adjustedTotalAmount: result.adjustedTotalAmount,\n                resultsPerAmount: result.resultsPerAmount,\n                aggregatedSplits: result.aggregatedSplits,\n                calculationSteps: result.calculationSteps, // This is Omit<CalculationStepDetails, 'error'> & { error?: undefined }\n                splitPeriodUsed: result.splitPeriodUsed,\n            };\n            onCalculateAction(callbackFormData, successResultForCallback, undefined);\n            setShowSuccessGlow(true); // Trigger success animation\n            setTimeout(() => setShowSuccessGlow(false), 1500);\n        } else {\n            // Error case: result is CalculateInvoiceSplitFailure\n            // The error object is result.error (which is CalculationError)\n            // Pass the error and null for results.\n            // The callbackFormData can still be useful for context.\n            onCalculateAction(callbackFormData, null, result.error);\n        }\n\n        setIsCalculating(false);\n        setButtonText(t('InvoiceForm.calculateButton', { defaultValue: 'Calculate Split' }));\n    }, [onCalculateAction, t]);\n\n    // Effect to ensure all form fields have valid values\n    useEffect(() => {\n        // Skip during initial render or when component is not mounted\n        if (!mounted) {\n            return;\n        }\n        \n        // Get current values\n        const currentValues = form.getValues();\n        let updatedValues = false;\n        \n        // Ensure splitPeriod has a valid value\n        if (!currentValues.splitPeriod || !['yearly', 'quarterly', 'monthly'].includes(currentValues.splitPeriod)) {\n            form.setValue('splitPeriod', 'yearly');\n            updatedValues = true;\n        }\n        \n        // Ensure includeEndDate is a boolean\n        if (typeof currentValues.includeEndDate !== 'boolean') {\n            form.setValue('includeEndDate', true);\n            updatedValues = true;\n        }\n        \n        // Ensure amounts array is valid\n        if (!currentValues.amounts || currentValues.amounts.length === 0) {\n            form.setValue('amounts', [{ value: '' }]);\n            updatedValues = true;\n        }\n        \n        // Log if we had to make any corrections\n        if (updatedValues) {\n            console.log('[InvoiceForm] Applied default values for missing form fields');\n        }\n    }, [mounted, form]);\n\n    // Single useEffect for initialization and theme handling\n    useEffect(() => {\n        if (!mounted) {\n            console.log(\"[InvoiceForm] Component mounting\");\n            setMounted(true);\n            setButtonText(t('InvoiceForm.calculateButton', { defaultValue: 'Calculate Split' }));\n            \n            // Don't try to access localStorage until component is mounted\n            return;\n        }\n        \n        // Only run initialization logic once\n        if (initRef.current) {\n            return;\n        }\n        \n        initRef.current = true;\n        console.log(\"[InvoiceForm] Initializing form data...\");\n        \n        // Separate method for initialization, extracted for readability\n        const initializeFormData = () => {\n            try {\n                // Initialization priority:\n                // 1. Demo data from props\n                // 2. Clean URL parameter\n                // 3. Cached data from localStorage\n                // 4. Default values\n                \n                // Check if demo data is provided\n                if (initialDemoData) {\n                    console.log(\"[InvoiceForm] Using demo data from prop:\", initialDemoData);\n                    \n                    const demoFormData = {\n                        startDateString: initialDemoData.startDateString || '',\n                        endDateString: initialDemoData.endDateString || '',\n                        includeEndDate: initialDemoData.includeEndDate === true,\n                        splitPeriod: initialDemoData.splitPeriod || 'yearly',\n                        amounts: [{ value: initialDemoData.amount ? String(initialDemoData.amount) : '' }]\n                    };\n\n                    // Apply demo data to form\n                    form.reset(demoFormData);\n                    \n                    // Save demo data to localStorage\n                    localStorage.setItem(storageKey, JSON.stringify(demoFormData));\n                    \n                    // Notify parent that demo data was processed\n                    if (onDemoDataApplied) {\n                        console.log(\"[InvoiceForm] Notifying parent that demo data was applied\");\n                        onDemoDataApplied();\n                    }\n                    \n                    // Auto-submit the form after a short delay\n                    setTimeout(() => {\n                        form.trigger().then(isValid => {\n                            if (isValid) {\n                                console.log(\"[InvoiceForm] Form is valid, auto-submitting\");\n                                form.handleSubmit(onSubmit)();\n                            } else {\n                                console.warn(\"[InvoiceForm] Auto-submit cancelled - validation failed:\", form.formState.errors);\n                            }\n                        });\n                    }, 350);\n                    \n                    return; // Exit early if demo data was applied\n                }\n                \n                // Check for clean URL parameter\n                if (typeof window !== 'undefined') {\n                    const urlParams = new URLSearchParams(window.location.search);\n                    const forceClean = urlParams.get('clean') === 'true';\n                    \n                    if (forceClean) {\n                        console.log(\"[InvoiceForm] 'clean=true' parameter detected, clearing cache\");\n                        localStorage.removeItem(storageKey);\n                        form.reset(DEFAULT_FORM_VALUES);\n                        return; // Exit early if clean mode was requested\n                    }\n                }\n                \n                // Try loading from cache\n                const cachedDataString = localStorage.getItem(storageKey);\n                if (cachedDataString) {\n                    console.log(\"[InvoiceForm] Loading data from localStorage cache\");\n                    try {\n                        const parsedCache = JSON.parse(cachedDataString) as FormSchemaType;\n                        \n                        // Ensure amounts is not empty\n                        if (!parsedCache.amounts || parsedCache.amounts.length === 0) {\n                            parsedCache.amounts = [{ value: '' }];\n                        }\n                        \n                        // Ensure splitPeriod has a valid value\n                        if (!parsedCache.splitPeriod || !['yearly', 'quarterly', 'monthly'].includes(parsedCache.splitPeriod)) {\n                            parsedCache.splitPeriod = 'yearly';\n                        }\n                        \n                        form.reset(parsedCache);\n                    } catch (error) {\n                        console.error(\"[InvoiceForm] Error parsing cached data:\", error);\n                        resetToDefaultValues();\n                    }\n                } else {\n                    console.log(\"[InvoiceForm] No cached data found, using defaults\");\n                    // No need to reset - form already has default values\n                }\n            } catch (error) {\n                // Fallback if there are any errors accessing localStorage\n                console.error(\"[InvoiceForm] Error during initialization:\", error);\n                resetToDefaultValues();\n            }\n        };\n        \n        // Helper function to reset to default values\n        const resetToDefaultValues = () => {\n            // Clear any invalid data from storage\n            try {\n                localStorage.removeItem(storageKey);\n            } catch {} // Ignore errors\n            \n            // Reset form to default values\n            form.reset(DEFAULT_FORM_VALUES);\n        };\n        \n        // Call initialization\n        initializeFormData();\n        \n    }, [mounted, initialDemoData, onDemoDataApplied, t, form, storageKey, onSubmit]);\n    \n    const getDateHelpText = () => {\n        if (i18n.language.startsWith('de')) {\n            return t('InvoiceForm.supportedDateFormats', { defaultValue: 'Unterstützte Formate: TT.MM.JJJJ, JJJJ-MM-TT' });\n        } else {\n            return t('InvoiceForm.supportedDateFormats', { defaultValue: 'Supported formats: YYYY-MM-DD, DD.MM.YYYY' });\n        }\n    };\n\n    const onSelectStartDate = (date: Date | undefined) => {\n        if (date) {\n            const formatted = format(date, displayDateFormat);\n            form.setValue(\"startDateString\", formatted, { shouldValidate: true });\n        }\n        setIsStartDatePopoverOpen(false);\n    };\n\n    const onSelectEndDate = (date: Date | undefined) => {\n        if (date) {\n            const formatted = format(date, displayDateFormat);\n            form.setValue(\"endDateString\", formatted, { shouldValidate: true });\n        }\n        setIsEndDatePopoverOpen(false);\n    };\n\n    const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        \n        // Clear any previous errors\n        form.clearErrors(\"startDateString\");\n        \n        // Set the new value\n        form.setValue(\"startDateString\", value, { shouldValidate: false });\n        \n        // Validate the date format\n        const parsedDate = tryParseDate(value);\n        if (value && !parsedDate) {\n            form.setError(\"startDateString\", {\n                type: \"manual\",\n                message: getDateHelpText()\n            });\n        } \n        // If this is a valid date, check if end date is now invalid in comparison\n        else if (parsedDate) {\n            const endDateValue = form.getValues(\"endDateString\");\n            const endDate = tryParseDate(endDateValue ?? '');\n            \n            // If end date exists and is now before start date, set end date error\n            if (endDate && endDate < parsedDate) {\n                form.setError(\"endDateString\", {\n                    type: \"manual\",\n                    message: t('InvoiceForm.errorEndDateBeforeStart')\n                });\n            }\n        }\n        \n        // Always trigger validation to update form state\n        form.trigger(\"startDateString\");\n    };\n\n    const handleEndDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        \n        // Clear any previous errors\n        form.clearErrors(\"endDateString\");\n        \n        // Set the new value\n        form.setValue(\"endDateString\", value, { shouldValidate: false });\n        \n        // Validate the date format\n        const parsedDate = tryParseDate(value);\n        if (value && !parsedDate) {\n            form.setError(\"endDateString\", {\n                type: \"manual\",\n                message: getDateHelpText()\n            });\n        } \n        // If this is a valid date, check if it's before the start date\n        else if (parsedDate) {\n            const startDateValue = form.getValues(\"startDateString\");\n            const startDate = tryParseDate(startDateValue ?? '');\n            \n            // If start date exists and end date is before it, set error\n            if (startDate && parsedDate < startDate) {\n                form.setError(\"endDateString\", {\n                    type: \"manual\",\n                    message: t('InvoiceForm.errorEndDateBeforeStart')\n                });\n            }\n        }\n        \n        // Always trigger validation to update form state\n        form.trigger(\"endDateString\");\n    };\n\n    if (!mounted) {\n        return (\n            <div className=\"space-y-6\">\n                {/* Date fields grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                   <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted/60 rounded-sm animate-pulse w-2/5\" />\n                        <div className=\"h-10 bg-muted/60 rounded-md animate-pulse w-full\" />\n                   </div>\n                    <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted/60 rounded-sm animate-pulse w-2/5\" />\n                        <div className=\"h-10 bg-muted/60 rounded-md animate-pulse w-full\" />\n                   </div>\n                </div>\n                \n                {/* Include End Date toggle */}\n                <div className=\"h-20 bg-muted/40 rounded-lg animate-pulse border border-muted/30 p-4 flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted/60 rounded-sm animate-pulse w-40\" />\n                        <div className=\"h-3 bg-muted/60 rounded-sm animate-pulse w-56\" />\n                    </div>\n                    <div className=\"h-6 w-12 bg-muted/60 rounded-full animate-pulse\" />\n                </div>\n                \n                {/* Split Period dropdown */}\n                <div className=\"h-20 bg-muted/40 rounded-lg animate-pulse border border-muted/30 p-4 flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted/60 rounded-sm animate-pulse w-32\" />\n                        <div className=\"h-3 bg-muted/60 rounded-sm animate-pulse w-64\" />\n                    </div>\n                    <div className=\"h-10 w-28 bg-muted/60 rounded-md animate-pulse\" />\n                </div>\n                \n                {/* Amounts section */}\n                <div className=\"rounded-lg border border-muted/30 p-6 shadow-xs space-y-4 bg-muted/10\">\n                    <div className=\"h-5 bg-muted/60 rounded-sm animate-pulse w-1/4\" />\n                    <div className=\"h-4 bg-muted/60 rounded-sm animate-pulse w-3/5 mb-4\" />\n                    <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                            <div className=\"h-3 bg-muted/60 rounded-sm animate-pulse w-8\" />\n                            <div className=\"flex gap-2\">\n                                <div className=\"h-10 bg-muted/60 rounded-md animate-pulse flex-grow\" />\n                                <div className=\"h-10 w-10 bg-muted/60 rounded-md animate-pulse opacity-0\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"h-8 bg-muted/60 rounded-md animate-pulse w-40 mt-6\" />\n                </div>\n              \n                {/* Calculate button */}\n                <div className=\"h-11 bg-primary/40 rounded-md animate-pulse w-full\" />\n            </div>\n        );\n    }\n\n    return (\n        <FormProvider {...form}>\n            <form \n                onSubmit={form.handleSubmit(onSubmit)} \n                className={cn(\"space-y-6\", mounted && \"opacity-100 transition-opacity duration-500 ease-in-out\", !mounted && \"opacity-0\")}\n            >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField \n                        control={form.control} \n                        name=\"startDateString\" \n                        render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                                <FormLabel htmlFor=\"startDateString\">{t('InvoiceForm.startDateLabel')}</FormLabel>\n                                <Popover open={isStartDatePopoverOpen} onOpenChange={setIsStartDatePopoverOpen}>\n                                    <FormControl>\n                                        <div className=\"w-full relative\">\n                                            <Input \n                                                value={field.value} \n                                                onChange={(e) => { \n                                                    field.onChange(e); \n                                                    handleStartDateChange(e); \n                                                }} \n                                                onBlur={() => form.trigger(\"startDateString\")} \n                                                placeholder={dateExamplePlaceholder} \n                                                className={`w-full pr-16 ${form.formState.errors.startDateString ? \"border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20\" : \"\"}`} \n                                                autoFocus \n                                                id=\"startDateString\"\n                                                name=\"startDateString\"\n                                            />\n                                            {field.value && !form.formState.errors.startDateString && (\n                                                <div className=\"absolute inset-y-0 right-12 flex items-center z-[1]\">\n                                                    <CheckCircle className=\"h-4 w-4 text-success\" />\n                                                </div>\n                                            )}\n                                            {form.formState.errors.startDateString && (\n                                                <div className=\"absolute inset-y-0 right-12 flex items-center z-[1]\">\n                                                    <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                                                </div>\n                                            )}\n                                            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center z-[1]\">\n                                                <PopoverTrigger asChild>\n                                                    <Button \n                                                        type=\"button\" \n                                                        variant=\"ghost\" \n                                                        className=\"h-7 w-7 p-0 rounded-full hover:bg-primary hover:text-primary-foreground transition-colors duration-200 cursor-pointer\" \n                                                        aria-label=\"Pick a date\"\n                                                    >\n                                                        <CalendarIcon className=\"h-4 w-4 transition-colors duration-200\" />\n                                                    </Button>\n                                                </PopoverTrigger>\n                                            </div>\n                                        </div>\n                                    </FormControl>\n                                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                        <Calendar \n                                            mode=\"single\" \n                                            selected={tryParseDate(form.watch(\"startDateString\") ?? '') || undefined} \n                                            onSelect={onSelectStartDate} \n                                            initialFocus \n                                            locale={currentLocale}\n                                            defaultMonth={tryParseDate(form.watch(\"startDateString\") ?? '') || new Date()}\n                                        />\n                                    </PopoverContent>\n                                </Popover>\n                                <FormMessage className=\"text-xs mt-1 error-message\">{form.formState.errors.startDateString?.message}</FormMessage>\n                            </FormItem>\n                        )} \n                    />\n                    <FormField \n                        control={form.control} \n                        name=\"endDateString\" \n                        render={({ field }) => (\n                            <FormItem className=\"flex flex-col\">\n                                <FormLabel htmlFor=\"endDateString\">{t('InvoiceForm.endDateLabel')}</FormLabel>\n                                <Popover open={isEndDatePopoverOpen} onOpenChange={setIsEndDatePopoverOpen}>\n                                    <FormControl>\n                                        <div className=\"w-full relative\">\n                                            <Input \n                                                value={field.value} \n                                                onChange={(e) => { \n                                                    field.onChange(e); \n                                                    handleEndDateChange(e); \n                                                }} \n                                                onBlur={() => form.trigger(\"endDateString\")} \n                                                placeholder={dateExamplePlaceholder} \n                                                className={`w-full pr-16 ${form.formState.errors.endDateString ? \"border-destructive focus:border-destructive focus:ring-2 focus:ring-destructive/20\" : \"\"}`} \n                                                id=\"endDateString\"\n                                                name=\"endDateString\"\n                                            />\n                                            {field.value && !form.formState.errors.endDateString && (\n                                                <div className=\"absolute inset-y-0 right-12 flex items-center z-[1]\">\n                                                    <CheckCircle className=\"h-4 w-4 text-success\" />\n                                                </div>\n                                            )}\n                                            {form.formState.errors.endDateString && (\n                                                <div className=\"absolute inset-y-0 right-12 flex items-center z-[1]\">\n                                                    <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                                                </div>\n                                            )}\n                                            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center z-[1]\">\n                                                <PopoverTrigger asChild>\n                                                    <Button \n                                                        type=\"button\" \n                                                        variant=\"ghost\" \n                                                        className=\"h-7 w-7 p-0 rounded-full hover:bg-primary hover:text-primary-foreground transition-colors duration-200 cursor-pointer\" \n                                                        aria-label=\"Pick a date\"\n                                                    >\n                                                        <CalendarIcon className=\"h-4 w-4 transition-colors duration-200\" />\n                                                    </Button>\n                                                </PopoverTrigger>\n                                            </div>\n                                        </div>\n                                    </FormControl>\n                                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                        <Calendar \n                                            mode=\"single\" \n                                            selected={tryParseDate(form.watch(\"endDateString\") ?? '') || undefined} \n                                            onSelect={onSelectEndDate} \n                                            initialFocus \n                                            locale={currentLocale}\n                                            defaultMonth={tryParseDate(form.watch(\"endDateString\") ?? '') || tryParseDate(form.watch(\"startDateString\") ?? '') || new Date()}\n                                            disabled={(date) => { \n                                                const startDate = tryParseDate(form.watch(\"startDateString\") ?? ''); \n                                                return startDate ? date < startDate : false; \n                                            }} \n                                        />\n                                    </PopoverContent>\n                                </Popover>\n                                <FormMessage className=\"text-xs mt-1 error-message\">{form.formState.errors.endDateString?.message}</FormMessage>\n                            </FormItem>\n                        )} \n                    />\n                </div>\n                <FormField \n                    control={form.control} \n                    name=\"includeEndDate\" \n                    render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                                <FormLabel htmlFor=\"includeEndDate\" className=\"text-base\">{t('InvoiceForm.includeEndDateLabel')}</FormLabel>\n                                <FormDescription>{t('InvoiceForm.includeEndDateDescription')}</FormDescription>\n                            </div>\n                            <FormControl>\n                                <div className=\"flex items-center border-none outline-none\">\n                                    <Switch\n                                        checked={field.value}\n                                        onCheckedChange={field.onChange}\n                                        id=\"includeEndDate\"\n                                        name=\"includeEndDate\"\n                                    />\n                                </div>\n                            </FormControl>\n                        </FormItem>\n                    )} \n                />\n                <FormField \n                    control={form.control} \n                    name=\"splitPeriod\" \n                    render={({ field }) => (\n                        <FormItem className=\"flex flex-col items-start justify-start rounded-lg border p-4\">\n                            <div className=\"space-y-0.5 pr-4 mb-3\">\n                                <FormLabel htmlFor=\"splitPeriod\" className=\"text-base\">{t('InvoiceForm.splitPeriodLabel', { defaultValue: 'Split Period' })}</FormLabel>\n                                <FormDescription>{t('InvoiceForm.splitPeriodDescription', { defaultValue: 'Choose how to split the invoice amounts.' })}</FormDescription>\n                            </div>\n                            <div className=\"w-full\">\n                                <Select \n                                    onValueChange={field.onChange} \n                                    defaultValue={field.value}\n                                    value={field.value}\n                                    name={field.name}\n                                >\n                                    <FormControl>\n                                        <SelectTrigger className=\"w-full\" id=\"splitPeriod\">\n                                            <SelectValue placeholder={t('InvoiceForm.periodYearly', { defaultValue: 'Yearly' })} />\n                                        </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent \n                                        className=\"!fixed !z-[9999] !overflow-visible shadow-lg\" \n                                        position=\"popper\" \n                                        sideOffset={8}\n                                        align=\"center\"\n                                        avoidCollisions\n                                        collisionPadding={20}\n                                    >\n                                        <SelectItem \n                                            key=\"yearly\" \n                                            value=\"yearly\" \n                                            className=\"select-dropdown-item !cursor-pointer\"\n                                            style={{cursor: 'pointer'}}\n                                        >\n                                            {`${t('InvoiceForm.periodYearly', { defaultValue: 'Yearly' })}`}\n                                        </SelectItem>\n                                        <SelectItem \n                                            key=\"quarterly\" \n                                            value=\"quarterly\" \n                                            className=\"select-dropdown-item !cursor-pointer\"\n                                            style={{cursor: 'pointer'}}\n                                        >\n                                            {`${t('InvoiceForm.periodQuarterly', { defaultValue: 'Quarterly' })}`}\n                                        </SelectItem>\n                                        <SelectItem \n                                            key=\"monthly\" \n                                            value=\"monthly\" \n                                            className=\"select-dropdown-item !cursor-pointer\"\n                                            style={{cursor: 'pointer'}}\n                                        >\n                                            {`${t('InvoiceForm.periodMonthly', { defaultValue: 'Monthly' })}`}\n                                        </SelectItem>\n                                    </SelectContent>\n                                </Select>\n                                <FormMessage />\n                            </div>\n                        </FormItem>\n                    )} \n                />\n                <div className=\"space-y-5 rounded-lg border p-6 shadow-xs\">\n                    <h3 className=\"text-base font-medium\" id=\"amounts-section-label\">{t('InvoiceForm.amountsLabel')}</h3>\n                    <FormDescription>{t('InvoiceForm.amountsDescription')}</FormDescription>\n                    <div aria-labelledby=\"amounts-section-label\" className=\"space-y-4 mt-4\">\n                    {fields.map((item, index) => (\n                        <FormField \n                            control={form.control} \n                            key={item.id} \n                            name={`amounts.${index}.value`} \n                            render={({ field }) => (\n                                <FormItem className=\"mb-3\">\n                                    <div className=\"flex flex-col gap-1\">\n                                        <FormLabel htmlFor={`amount-${index}`} className=\"text-sm font-medium\">#{index + 1}</FormLabel>\n                                        <div className=\"flex items-center gap-2\">\n                                            <div className=\"relative flex-1\">\n                                                <FormControl>\n                                                    <Input \n                                                        type=\"number\" \n                                                        step=\"any\" \n                                                        className=\"focus:border-primary focus:ring-2 focus:ring-primary/20 transition-transform duration-150 pr-8\" \n                                                        {...field} \n                                                        id={`amount-${index}`}\n                                                        name={`amounts.${index}.value`}\n                                                    />\n                                                </FormControl>\n                                                <div className=\"absolute right-2 top-0 h-full flex items-center justify-center z-[1]\">\n                                                    {field.value && !isNaN(parseFloat(field.value)) && parseFloat(field.value) > 0 && (\n                                                        <div className=\"flex items-center justify-center h-5 w-5\">\n                                                            <CheckCircle className=\"h-4 w-4 text-success\" />\n                                                        </div>\n                                                    )}\n                                                    {form.formState.errors.amounts?.[index]?.value && (\n                                                        <div className=\"flex items-center justify-center h-5 w-5\">\n                                                            <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            </div>\n                                            {fields.length > 1 && (\n                                                <Button \n                                                    type=\"button\" \n                                                    variant=\"ghost\" \n                                                    size=\"icon\" \n                                                    onClick={() => remove(index)} \n                                                    className=\"text-gray-400 hover:text-gray-500 hover:bg-gray-100 transition-all duration-200 shrink-0\" \n                                                    aria-label=\"Remove amount\"\n                                                >\n                                                    <XCircle className=\"h-4 w-4 transition-transform duration-150 hover:scale-95\" />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <FormMessage className=\"text-xs mt-1 error-message\" />\n                                </FormItem>\n                            )} \n                        />\n                    ))}\n                    <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => { \n                            append({ value: \"\" }); \n                            setTimeout(() => { \n                                const ni = document.querySelectorAll('input[type=\"number\"]'); \n                                if (ni.length > 0) (ni[ni.length - 1] as HTMLInputElement).focus(); \n                            }, 10); \n                        }} \n                        className=\"mt-4\"\n                    >\n                        <PlusCircle className=\"mr-2 h-4 w-4\" /> {t('InvoiceForm.addAmountButton')}\n                    </Button>\n                    {form.formState.errors.amounts && !form.formState.errors.amounts.root && form.formState.errors.amounts.message && (\n                        <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.amounts.message}</p>\n                    )}\n                    {form.formState.errors.amounts?.root?.message && (\n                        <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.amounts.root.message}</p>\n                    )}\n                    </div>\n                </div>\n                <Button \n                    type=\"submit\" \n                    variant=\"default\"\n                    className={`w-full bg-primary text-primary-foreground hover:bg-primary/90 hover:scale-[1.02] px-6 py-2 h-11 font-medium rounded-md shadow-sm transition-all duration-200 hover:shadow-lg hover:shadow-primary/20 ${showSuccessGlow ? 'animate-success-glow' : ''}`}\n                    disabled={form.formState.isSubmitting || isCalculating}\n                    aria-live=\"polite\"\n                >\n                    {isCalculating ? (\n                        <span className=\"flex items-center justify-center\">\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            {buttonText}\n                        </span>\n                    ) : (\n                        buttonText\n                    )}\n                </Button>\n            </form>\n        </FormProvider>\n    );\n}\n\n// Need to wrap with TooltipProvider at a higher level if using tooltips inside \n"],"names":["Switch","React","ref","className","props","SwitchPrimitives","cn","displayName","Popover","PopoverPrimitive","data-slot","PopoverTrigger","PopoverContent","align","sideOffset","isMounted","setIsMounted","isMountedRef","current","mountTimer","setTimeout","clearTimeout","document","querySelectorAll","forEach","element","parentNode","removeChild","style","backgroundColor","opacity","Calendar","classNames","showOutsideDays","locale","DayPicker","months","month","caption","caption_label","nav","nav_button","buttonVariants","variant","nav_button_previous","nav_button_next","month_grid","weekdays","weekday","week","cell","day","day_range_end","day_selected","day_today","day_outside","day_disabled","day_range_middle","day_hidden","components","Chevron","orientation","ChevronLeft","ChevronRight","weekStartsOn","options","DATE_FORMAT_ISO","DATE_FORMAT_DE","DEFAULT_FORM_VALUES","startDateString","endDateString","includeEndDate","splitPeriod","amounts","value","supportedDateFormats","tryParseDate","parseDate","formSchema","z","object","string","optional","boolean","enum","array","min","message","t","refine","isNaN","parseFloat","val","data","path","startDate","endDate","InvoiceForm","onCalculateAction","initialDemoData","onDemoDataApplied","i18n","useTranslation","mounted","setMounted","useState","isCalculating","setIsCalculating","buttonText","setButtonText","showSuccessGlow","setShowSuccessGlow","initRef","useRef","currentLocale","language","startsWith","de","enUS","displayDateFormat","dateExamplePlaceholder","storageKey","isStartDatePopoverOpen","setIsStartDatePopoverOpen","isEndDatePopoverOpen","setIsEndDatePopoverOpen","currentFormSchema","form","useForm","resolver","zodResolver","defaultValues","mode","fields","append","remove","useFieldArray","control","name","debouncedSaveFunction","useMemo","debounce","amountsToSave","dataToSave","length","saveData","console","log","localStorage","setItem","JSON","stringify","error","formValues","useWatch","useEffect","getValues","cancel","onSubmit","useCallback","values","parsedAmounts","map","a","callbackFormData","filter","InputValidationError","defaultValue","ERROR_CODES","INVALID_DATES","some","INVALID_AMOUNT","invalidAmounts","inputData","result","calculateInvoiceSplit","success","totalDays","successResultForCallback","originalTotalAmount","adjustedTotalAmount","resultsPerAmount","aggregatedSplits","calculationSteps","splitPeriodUsed","undefined","currentValues","updatedValues","includes","setValue","resetToDefaultValues","removeItem","reset","initializeFormData","demoFormData","amount","String","trigger","then","isValid","handleSubmit","warn","formState","errors","urlParams","URLSearchParams","window","location","search","forceClean","get","cachedDataString","getItem","parsedCache","parse","getDateHelpText","onSelectStartDate","date","formatted","format","shouldValidate","onSelectEndDate","handleStartDateChange","e","target","clearErrors","parsedDate","setError","type","handleEndDateChange","FormProvider","div","FormField","render","field","FormItem","FormLabel","htmlFor","open","onOpenChange","FormControl","Input","onChange","onBlur","placeholder","autoFocus","id","CheckCircle","AlertCircle","asChild","Button","aria-label","CalendarIcon","selected","watch","onSelect","initialFocus","defaultMonth","Date","FormMessage","disabled","FormDescription","checked","onCheckedChange","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","position","avoidCollisions","collisionPadding","SelectItem","cursor","h3","aria-labelledby","item","index","step","size","onClick","XCircle","ni","focus","PlusCircle","root","p","isSubmitting","aria-live","span","Loader2"],"sourceRoot":""}