{"version":3,"file":"static/chunks/6689-d9104928b4581175.js","mappings":"m2tBAuBA,IAAMA,EAAmD,CACvDC,GAAI,CAAEC,YAAaC,CAAsC,EACzDC,GAAI,CAAEF,WAD2BC,CACdE,CAAsC,CAC3D,EAMO,SAASC,EACdC,CAAW,CACXC,CATiCH,EAYjC,IAAMI,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,GAE3BC,EAA8B,CAAC,EAGE,UAAjC,OAAOH,EACTG,EAAU,CAAEC,aAAcJ,CAAsB,EACvCA,IACTG,EAAUH,CAAAA,EAIZ,IAAMN,EAAcW,QALc,CAsB3BA,CACI,CACXJ,CAAuB,EAIvB,IAAMK,EAAWd,CAAY,CAACS,EAAK,EADjB,CACoBM,UAAU,CAEhD,GAHiC,CAG5BD,EAAU,OAAOE,IAGhBC,EAAQV,EAAIW,KAAK,CAAC,KACpBC,EAAmBL,EAP2C,IAU7D,IAAMM,KAAQH,EAAO,CACxB,SACEE,GAEmB,SAFPH,CAEZ,OAAOG,EAEP,GAHAA,IAGOH,EAIC,CAAoC,CAACI,EAAK,CAItD,CAXgB,KAWU,UAAnB,OAAOD,EAAuBA,OAAUH,CACjD,EA/CqCT,EAAKE,GAGlCY,EAAYC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAACpB,GAAeS,EAAQC,YAAY,EAAIL,UAGlE,EAAYgB,MAAM,EAAIC,OAAOC,IAAI,CAACd,EAAQY,MAAM,EAAEG,MAAM,CAAG,EAClDC,CADqD,QA8CvDA,CACK,CACZJ,CAAuC,EAEvC,OAAOK,EAAKC,OAAO,CAAC,oBAAqB,CAACC,EAAOvB,KAC/C,IAAMwB,EAAcR,CAAM,CAAChB,EAAIyB,IAAI,GAAG,CAEtC,YAAuBhB,IAAhBe,EAA4BT,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAACS,GAAeD,CAC7D,EACF,EAtDyBT,EAAWV,EAAQY,MAAM,EAGzCF,CACT,CA2DO,SAASY,IACd,GAAM,UACJC,CAAQ,CACR5B,EAAG6B,CAAQ,CACXC,eAAgBC,CAAqB,CACtC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,EAAAA,kBAAkBA,EAIjC,MAAO,CACLjC,EAAG6B,EACHK,KAAM,CACJN,SAAUA,EACVE,eAAgBC,CAClB,CACF,CACF,CAtBoB,CACR3B,EAAAA,EAAAA,EAAAA,CAAkBA,0EE5GvB,IAAM+B,EAAsB,CAAC,KAAM,KAAK,CAAU,EAGrB,cAAc,EACd,kCAAkC,OAc/D,SAASC,EAXyBC,EAoBvC,IAAMC,EAAeC,OAAOC,QAAQ,CAACC,QAAQ,CAAC7B,KAAK,CAAC,KAC9C8B,EACJJ,EAAalB,MAAM,CAAG,GACtBe,EAAoBQ,QAAQ,CAACL,CAAY,CAAC,EAAE,EACvCA,CAAY,CAAC,EAAE,CAChB,KASAM,EAAaC,CAND,IAEhB,IAAMlC,EAAQmC,CADC,EAAE,EAAEC,SAASC,MAAM,EAAE,CAChBpC,KAAK,CAAC,CAAC,EAAE,EAAEqC,EAAK,CAAC,CAAC,SACtC,GAAwB,CAApBtC,EAAMS,MAAM,EAAeT,EAAMuC,GAAG,IAAItC,MAAM,KAAKuC,SAAW,KAEpE,EAC6BC,GAGvBC,EAAaC,aAAaC,OAAO,CAACC,GAGlCC,EACJC,UAAU9B,QAAQ,EAClBO,EAAoBQ,QAAQ,CAC1Be,UAAU9B,QAAQ,CAAC+B,SAAS,CAAC,EAAG,GAAGC,WAAW,IAE3CF,UAAU9B,QAAQ,CAAC+B,SAAS,CAAC,EAAG,GAAGC,WAAW,GAC/C,KAGAC,EACJ,CAACnB,GAAWP,EAAoBQ,QAAQ,CAACD,GAAWA,EAAU,KAAG,GAChEE,EAAAA,CAAcT,EAAoBQ,QAAQ,CAACC,GACvCA,EACD,KAAG,GACNS,EAAAA,CAAclB,EAAoBQ,QAAQ,CAACU,GACvCA,EACD,KAAG,GACNI,EAAAA,CAAetB,EAAoBQ,QAAQ,CAACc,GACzCA,EACA,KAAG,EAhEwC,GAiE/CpB,EAOF,OAJIK,GAAWW,IAAeX,GAC5BY,MADqC,OACxBQ,OAAO,CAACN,EAAsBd,GAGtCmB,CACT,CAKO,SAASE,EAAmBC,CAAmC,EAGlEC,EADED,GAAmB7B,EAAoBQ,QAAQ,CAACqB,GAChCA,EAGA5B,IAII,SAR8C,IAQlE,OAAOW,WACTA,SAASmB,eAAe,CAAC/D,IAAI,CAAG8D,EAChClB,SAASmB,eAAe,CAACC,YAAY,CAAC,YAAaF,GACnDlB,SAASmB,eAAe,CAACE,SAAS,CAACC,GAAG,CAAC,CAAC,KAAK,EAAEJ,EAAAA,CAAiB,EAEpE,CAKO,SAAS7D,IAKd,OAHI,IACF6D,EAAkB7B,GAAAA,EAEb6B,CACT,CAuBO,IA3BiB,KA2BRnC,EACd3B,CAAuB,MACvBE,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAkC,CAAC,EAGnC,GAAI,CAAC8B,EAAoBQ,QAAQ,CAACxC,GAEhC,IAFuC,GACvCmE,QAAQC,IAAI,CAAC,CAAC,6CAA6C,EAAEpE,EAAAA,CAAM,GAC5D,EAIT,GAAIA,IAAS8D,EAAiB,OAAO,EAGrCA,EAAkB9D,CAGiB,EAEjCmD,aAAaQ,OAAO,CAACN,EAAsBrD,GAC3CqE,SAtCYA,CACS,MACvBC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAe,IAEf,GAAwB,aAApB,OAAO1B,SAA0B,OAErC,IAAM2B,EAAO,IAAIC,KACjBD,EAAKE,OAAO,CAACF,EAAKG,OAAO,GAAY,KAAPJ,KAAiB,CAC/C,IADoD,EACpC,CAAC,UAAU,EAAEC,EAAKI,WAAW,IAAI,CACjD/B,SAASC,MAAM,CAAG,GAAGI,EAAqB,CAAC,EAAEjD,EAAAA,EAAO4E,EAAQ,sBAAsB,CAAC,CAGnFhC,SAASC,MAAM,CAAG,GAAGQ,EAAqB,CAAC,EAAErD,EAAAA,EAAO4E,EAAQ,sBAAsB,CAAC,EA0B/D5E,GAGlB4C,SAASmB,eAAe,CAAC/D,IAAI,CAAGA,EAChC4C,SAASmB,eAAe,CAACC,YAAY,CAAC,YAAahE,GAGnDgC,EAAoB6C,OAAO,CAAEC,IAC3BlC,SAASmB,eAAe,CAACE,SAAS,CAACc,MAAM,CAAC,CAAC,KAAK,EAAED,EAAAA,CAAG,CACvD,GACAlC,SAASmB,eAAe,CAACE,SAAS,CAACC,GAAG,CAAC,CAAC,KAAK,EAAElE,EAAAA,CAAM,EAGrD,IAAMgF,EAAQ,IAAIC,YAAY,kBAAmB,CAC/CC,OAAQ,CAAEzD,SAAUzB,CAAK,CAC3B,GAIA,GAHA4C,SAASuC,aAAa,CAACH,GAGnB9E,EAAQkF,QAAQ,CAAE,CACpB,IAAM9C,EAAWF,OAAOC,QAAQ,CAACC,QAAQ,CACnCH,EAAeG,EAAS7B,KAAK,CAAC,KAEpC,GACE0B,EAAalB,MAAM,CAAG,GACtBe,EAAoBQ,QAAQ,CAACL,CAAY,CAAC,EAAE,EAC5C,CAEAA,CAAY,CAAC,EAAE,CAAGnC,EAClB,IAAMqF,EAAUlD,EAAamD,IAAI,CAAC,KAClClD,OAAOC,QAAQ,CAACkD,IAAI,CAAGF,CACzB,MAEEjD,CAFK,MAEEC,QAAQ,CAACkD,IAAI,CAAG,CAAC,CAAC,EAAEvF,EAAAA,EAAOsC,EAAAA,CAAU,CAGlD,CAEA,OAAO,CACT,CAKO,SAASkD,EAAoBC,CAAY,EAC9C,GAAI,CAACA,EAAM,OAAO,KAElB,IAAMC,EAAWD,EAAKhF,KAAK,CAAC,YAE1BiF,EAASzE,MAAM,CAAG,GAClBe,EAAoBQ,QAAQ,CAACkD,CAAQ,CAAC,EAAE,EAEjCA,CADP,CACgB,EAAE,CAGb,IACT,0FC5MO,SAASC,IAAG,kDAAGC,CAAAA,CAAH,eAAuB,CACxC,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAOA,CAACC,CAAAA,EAAAA,EAAAA,CAAAA,CAAIA,CAACF,GACtB,CAMO,SAAS/E,EAAS8B,CAAc,EACrC,SAAIA,EACF,MAAO,EADK,CAId,GAAqB,IAJCA,MAIlB,IAJ4BpC,GAIrBoC,EACT,MALyC,CAKlCA,EAGT,GAAqB,UAAjB,OAAOA,EACT,GAAI,CACF,OAAOoD,KAAKC,SAAS,CAACrD,EACxB,CAAE,KAAM,CACN,MAAO,UACT,CAGF,OAAOsD,OAAOtD,EAChB,CAQO,SAASuD,EAAgBvD,CAAa,CAAEwD,CAAgB,EAC7D,OAAOC,OAAOC,KAAKC,KAAK,CAACF,OAAOzD,EAAQ,IAAMwD,IAAa,KAAOA,EACpE,CA0DO,SAASI,EAAiBC,CAAkB,CAAEC,CAAW,EAC9D,GAAI,CACF,OAAOV,KAAKW,KAAK,CAACF,EACpB,CAAE,MAAOG,EAAO,CAEd,OADAxC,QAAQwC,KAAK,CAAC,sBAAuBA,GAC9BF,CACT,CACF,wHC9DO,IAAM3E,EACX8E,CAAAA,EAAAA,EAAAA,aAAAA,CAAaA,CA3BkC,CAC/CnF,SAAU,KACV5B,EAAG,CACDC,EACAC,CAuBsD,IArBtD,IAAM8G,EAC6B,UAAjC,OAAO9G,EACHA,OACAQ,EACAuG,EAC6B,UAAjC,OAAO/G,EACHA,OACAQ,SAEN,GAAqBJ,aACZ0G,CAD0B,CACV1G,YAAY,CAEjC2G,GAGGhH,CACT,EACA6B,eAAgB,CALY,IAKN,CACxB,GAKe,SAASoF,EAAoB,CAI3C,KAJ2C,UAC1CC,CAAQ,CAGT,CAJ2C,EAKpC1E,EAAW2E,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,IAAM,GAE5BC,EAAe1B,CAAAA,EAAAA,EAAAA,EAAAA,CAAmBA,CAAClD,GAEnC,CAAC6E,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAC5CH,GAAgBjH,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,IAGpCqH,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACJJ,GACFtD,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAACsD,EADH,CAEhBE,EAAeF,IAGfE,EADqBnH,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,GAG3C,EAFmByD,CAEfwD,EAAa,EAEjBI,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACJJ,GAAgBA,IAAiBC,IACnCvD,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAD8B,GAEhDwD,EAAeF,GAEnB,EAAG,CAAC5E,EAAU6E,EAAaD,EAAa,EAExCI,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,IAAMC,EAAwB,IAE5B,IAAMC,EADcC,EACQvC,MAAM,EAAEzD,SAEhC+F,GAAWA,IAAYL,GACzBC,EAAeI,EAEnB,EAGA,IAN0C,GAK1C5E,SAAS8E,gBAAgB,CAAC,kBAAmBH,GACtC,KACL3E,SAAS+E,mBAAmB,CAAC,kBAAmBJ,EAClD,CACF,EAAG,CAACJ,EAAY,EAEhB,IAAMS,EAAuB,GACpBjG,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAAC3B,EAAM,CAAEoF,UAAU,CAAK,GAGzCyC,EAAgBC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAC3B,IAAO,EACLrG,SAAU0F,EACVtH,EAAGkI,EAAAA,CAAOA,CACVpG,eAAgBiG,EAClB,EACA,CAACT,EAAY,EAGf,MACE,UAACrF,EAAmBkG,QAAQ,EAACrF,MAAOkF,WACjCb,GAGP","sources":["webpack://_N_E/./src/lib/translation.ts","webpack://_N_E/./src/translations.ts","webpack://_N_E/./src/lib/language-service.ts","webpack://_N_E/./src/lib/utils.ts","webpack://_N_E/./src/components/translation-provider.tsx"],"sourcesContent":["/**\n * Simple, direct translation system with zero eval() usage\n * Now using language-service.ts for language management\n */\n\nimport { SupportedLanguage, getCurrentLanguage } from \"./language-service\";\n\nimport { TranslationContext } from \"../components/translation-provider\";\nimport deTranslations from \"../messages/de.json\";\nimport enTranslations from \"../messages/en.json\";\nimport { safeText } from \"./utils\";\nimport { useContext } from \"react\";\n\n// Type safety for translation objects\ntype TranslationResource = Record<string, string | Record<string, string>>;\ntype NestedTranslations = Record<string, TranslationResource>;\n\ninterface TranslationOptions {\n  defaultValue?: string;\n  values?: Record<string, string | number>;\n}\n\n// Translations store\nconst translations: Record<string, NestedTranslations> = {\n  en: { translation: enTranslations as TranslationResource },\n  de: { translation: deTranslations as TranslationResource },\n};\n\n/**\n * Get a translated string with NO eval\n * Compatible with i18next API - accepts either options object or defaultValue string\n */\nexport function t(\n  key: string,\n  optionsOrDefaultValue?: TranslationOptions | string,\n): string {\n  // Get current language from language service\n  const lang = getCurrentLanguage();\n\n  let options: TranslationOptions = {};\n\n  // Handle i18next compatibility where second param can be defaultValue string\n  if (typeof optionsOrDefaultValue === \"string\") {\n    options = { defaultValue: optionsOrDefaultValue };\n  } else if (optionsOrDefaultValue) {\n    options = optionsOrDefaultValue;\n  }\n\n  // Get the translation or default value\n  const translation = getTranslation(key, lang);\n\n  // Ensure we always have a string, not an object (prevents React Error #418)\n  const finalText = safeText(translation || options.defaultValue || key);\n\n  // Replace any {{key}} values\n  if (options.values && Object.keys(options.values).length > 0) {\n    return replaceValues(finalText, options.values);\n  }\n\n  return finalText;\n}\n\n/**\n * Get a translation from the nested structure with dot notation\n * This is a safer implementation without eval()\n */\nfunction getTranslation(\n  key: string,\n  lang: SupportedLanguage,\n): string | undefined {\n  // Get correct namespace\n  const namespace = \"translation\"; // We only use a single namespace\n  const resource = translations[lang]?.[namespace];\n\n  if (!resource) return undefined;\n\n  // Handle dot notation (e.g., \"header.title\")\n  const parts = key.split(\".\");\n  let current: unknown = resource;\n\n  // Navigate down the object path\n  for (const part of parts) {\n    if (\n      current === undefined ||\n      current === null ||\n      typeof current !== \"object\"\n    ) {\n      return undefined;\n    }\n\n    // Type assertion since we've checked current is an object\n    current = (current as Record<string, unknown>)[part];\n  }\n\n  // Return the found string or undefined - but ensure it's a string\n  return typeof current === \"string\" ? current : undefined;\n}\n\n/**\n * Replace {{key}} placeholders in a string with values\n */\nfunction replaceValues(\n  text: string,\n  values: Record<string, string | number>,\n): string {\n  return text.replace(/\\{\\{([^{}]+)\\}\\}/g, (match, key) => {\n    const replacement = values[key.trim()];\n    // Ensure replacement is always a string\n    return replacement !== undefined ? safeText(replacement) : match;\n  });\n}\n\n// Simple i18n interface for compatibility with existing code\nexport const i18n = {\n  language: getCurrentLanguage(),\n  t,\n};\n\n// Export a hook-like function for React components\nexport function useTranslation() {\n  const {\n    language,\n    t: contextT,\n    changeLanguage: contextChangeLanguage,\n  } = useContext(TranslationContext);\n\n  // The t function from context already uses the correct language.\n  // The changeLanguage function from context will update the provider and global state.\n  return {\n    t: contextT,\n    i18n: {\n      language: language, // Use language from context\n      changeLanguage: contextChangeLanguage, // Use changeLanguage from context\n    },\n  };\n}\n\n// Enhanced Server-Side Translator function that gets language from params\nexport function getServerSideTranslator(lang: SupportedLanguage) {\n  return {\n    t: (\n      key: string,\n      optionsOrDefaultValue?: TranslationOptions | string,\n    ): string => {\n      let options: TranslationOptions = {};\n      if (typeof optionsOrDefaultValue === \"string\") {\n        options = { defaultValue: optionsOrDefaultValue };\n      } else if (optionsOrDefaultValue) {\n        options = optionsOrDefaultValue;\n      }\n\n      const translation = getTranslation(key, lang); // Use the passed 'lang'\n      const finalText = safeText(translation || options.defaultValue || key);\n\n      if (options.values && Object.keys(options.values).length > 0) {\n        return replaceValues(finalText, options.values);\n      }\n      return finalText;\n    },\n    language: lang, // Expose the language for consistency\n  };\n}\n","/**\n * Translation system entry point - 100% eval-free\n * This file exports from language-service.ts and lib/translation.ts for backward compatibility\n */\n\n// Import getCurrentLanguage specifically first\n\nimport { getCurrentLanguage } from \"./lib/language-service\";\n\n// Export these from language-service (the new central location)\nexport {\n  SUPPORTED_LANGUAGES,\n  DEFAULT_LANGUAGE as DEFAULT_LANGUAGE,\n  LANGUAGE_STORAGE_KEY,\n  getCurrentLanguage,\n  changeLanguage,\n  getLanguageFromPath,\n} from \"./lib/language-service\";\n\n// Export translation functions from translation.ts\nexport { t, i18n, useTranslation } from \"./lib/translation\";\n\n// For backward compatibility with existing code\nexport const getLanguage = getCurrentLanguage;\n","/**\n * Language Service - Single source of truth for language management\n * This service centralizes all language-related logic in one place\n */\n\n// Language-related constants\nexport const SUPPORTED_LANGUAGES = [\"en\", \"de\"] as const;\nexport type SupportedLanguage = (typeof SUPPORTED_LANGUAGES)[number];\nexport const DEFAULT_LANGUAGE: SupportedLanguage = \"en\";\nexport const LANGUAGE_COOKIE_NAME = \"NEXT_LOCALE\";\nexport const LANGUAGE_STORAGE_KEY = \"billingperiodallocator-language\";\n\n// Store the current language in memory\nlet currentLanguage: SupportedLanguage = DEFAULT_LANGUAGE;\n\n/**\n * Detect user's preferred language based on different sources\n * Order of precedence:\n * 1. URL path language segment\n * 2. Cookie\n * 3. Local storage\n * 4. Browser language\n * 5. Default language (en)\n */\nexport function detectLanguage(): SupportedLanguage {\n  if (typeof window === \"undefined\") {\n    // Server-side - can't detect much, will rely on Next.js params\n    return currentLanguage;\n  }\n\n  // Client-side detection (hydration phase)\n\n  // 1. First priority: Get language from URL path\n  const pathSegments = window.location.pathname.split(\"/\");\n  const urlLang =\n    pathSegments.length > 1 &&\n    SUPPORTED_LANGUAGES.includes(pathSegments[1] as SupportedLanguage)\n      ? (pathSegments[1] as SupportedLanguage)\n      : null;\n\n  // 2. Second priority: Check cookies\n  const getCookie = (name: string): string | null => {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop()?.split(\";\").shift() || null;\n    return null;\n  };\n  const cookieLang = getCookie(LANGUAGE_COOKIE_NAME);\n\n  // 3. Third priority: Check localStorage\n  const storedLang = localStorage.getItem(LANGUAGE_STORAGE_KEY);\n\n  // 4. Fourth priority: Check browser language\n  const browserLang =\n    navigator.language &&\n    SUPPORTED_LANGUAGES.includes(\n      navigator.language.substring(0, 2).toLowerCase() as SupportedLanguage,\n    )\n      ? (navigator.language.substring(0, 2).toLowerCase() as SupportedLanguage)\n      : null;\n\n  // Use best source available\n  const detectedLang =\n    (urlLang && SUPPORTED_LANGUAGES.includes(urlLang) ? urlLang : null) ||\n    (cookieLang && SUPPORTED_LANGUAGES.includes(cookieLang as SupportedLanguage)\n      ? (cookieLang as SupportedLanguage)\n      : null) ||\n    (storedLang && SUPPORTED_LANGUAGES.includes(storedLang as SupportedLanguage)\n      ? (storedLang as SupportedLanguage)\n      : null) ||\n    (browserLang && SUPPORTED_LANGUAGES.includes(browserLang)\n      ? browserLang\n      : null) ||\n    DEFAULT_LANGUAGE;\n\n  // Update storage if URL language differs\n  if (urlLang && storedLang !== urlLang) {\n    localStorage.setItem(LANGUAGE_STORAGE_KEY, urlLang);\n  }\n\n  return detectedLang;\n}\n\n/**\n * Initialize the language service (call once during app startup)\n */\nexport function initializeLanguage(initialLanguage?: SupportedLanguage): void {\n  // Set the initial language if provided (usually from URL/server)\n  if (initialLanguage && SUPPORTED_LANGUAGES.includes(initialLanguage)) {\n    currentLanguage = initialLanguage;\n  } else {\n    // Otherwise detect from available sources\n    currentLanguage = detectLanguage();\n  }\n\n  // Set html attributes for accessibility and styling\n  if (typeof document !== \"undefined\") {\n    document.documentElement.lang = currentLanguage;\n    document.documentElement.setAttribute(\"data-lang\", currentLanguage);\n    document.documentElement.classList.add(`lang-${currentLanguage}`);\n  }\n}\n\n/**\n * Get the current language\n */\nexport function getCurrentLanguage(): SupportedLanguage {\n  // Force detection if not yet initialized\n  if (!currentLanguage) {\n    currentLanguage = detectLanguage();\n  }\n  return currentLanguage;\n}\n\n/**\n * Set a cookie for language persistence\n */\nexport function setLanguageCookie(\n  lang: SupportedLanguage,\n  days: number = 365,\n): void {\n  if (typeof document === \"undefined\") return;\n\n  const date = new Date();\n  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n  const expires = `; expires=${date.toUTCString()}`;\n  document.cookie = `${LANGUAGE_COOKIE_NAME}=${lang}${expires}; path=/; SameSite=Lax`;\n\n  // Also set application-specific cookie for backward compatibility\n  document.cookie = `${LANGUAGE_STORAGE_KEY}=${lang}${expires}; path=/; SameSite=Lax`;\n}\n\n/**\n * Change the language and update all storage locations\n */\nexport function changeLanguage(\n  lang: SupportedLanguage,\n  options: { navigate?: boolean } = {},\n): boolean {\n  // Validate language\n  if (!SUPPORTED_LANGUAGES.includes(lang)) {\n    console.warn(`Attempted to change to unsupported language: ${lang}`);\n    return false;\n  }\n\n  // Skip if same language\n  if (lang === currentLanguage) return false;\n\n  // Update in-memory value\n  currentLanguage = lang;\n\n  // Client-side updates\n  if (typeof window !== \"undefined\") {\n    // Update storage\n    localStorage.setItem(LANGUAGE_STORAGE_KEY, lang);\n    setLanguageCookie(lang);\n\n    // Update HTML attributes\n    document.documentElement.lang = lang;\n    document.documentElement.setAttribute(\"data-lang\", lang);\n\n    // Remove old language classes and add new one\n    SUPPORTED_LANGUAGES.forEach((l) => {\n      document.documentElement.classList.remove(`lang-${l}`);\n    });\n    document.documentElement.classList.add(`lang-${lang}`);\n\n    // Notify components via custom event\n    const event = new CustomEvent(\"languageChanged\", {\n      detail: { language: lang },\n    });\n    document.dispatchEvent(event);\n\n    // Handle navigation if requested\n    if (options.navigate) {\n      const pathname = window.location.pathname;\n      const pathSegments = pathname.split(\"/\");\n\n      if (\n        pathSegments.length > 1 &&\n        SUPPORTED_LANGUAGES.includes(pathSegments[1] as SupportedLanguage)\n      ) {\n        // Replace language segment in URL\n        pathSegments[1] = lang;\n        const newPath = pathSegments.join(\"/\");\n        window.location.href = newPath;\n      } else {\n        // Add language segment if missing\n        window.location.href = `/${lang}${pathname}`;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Extract language from URL path\n */\nexport function getLanguageFromPath(path: string): SupportedLanguage | null {\n  if (!path) return null;\n\n  const segments = path.split(\"/\");\n  if (\n    segments.length > 1 &&\n    SUPPORTED_LANGUAGES.includes(segments[1] as SupportedLanguage)\n  ) {\n    return segments[1] as SupportedLanguage;\n  }\n\n  return null;\n}\n\n/**\n * Generate a URL with the specified language\n */\nexport function getLanguageUrl(lang: SupportedLanguage, path: string): string {\n  if (!path) return `/${lang}/`;\n\n  // Extract current path without language\n  const segments = path.split(\"/\");\n  const currentLang =\n    segments.length > 1 &&\n    SUPPORTED_LANGUAGES.includes(segments[1] as SupportedLanguage)\n      ? segments[1]\n      : null;\n\n  if (currentLang) {\n    // Replace language in path\n    segments[1] = lang;\n    return segments.join(\"/\");\n  } else {\n    // Add language to path\n    return `/${lang}${path}`;\n  }\n}\n\n// Initialize language detection on import (server-side)\n// Client-side will initialize via Provider\nif (typeof window === \"undefined\") {\n  initializeLanguage();\n}\n","import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Merges Tailwind CSS classes using clsx and tailwind-merge\n * Handles conditional class application and removes duplicates\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Safely converts any value to a string to prevent React error #418\n * This helps when displaying dynamic content that might be objects\n */\nexport function safeText(value: unknown): string {\n  if (value === null || value === undefined) {\n    return \"\";\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (typeof value === \"object\") {\n    try {\n      return JSON.stringify(value);\n    } catch {\n      return \"[Object]\";\n    }\n  }\n\n  return String(value);\n}\n\n/**\n * Rounds a number to a specific number of decimal places\n * @param value The number to round\n * @param decimals The number of decimal places\n * @returns The rounded number\n */\nexport function roundToDecimals(value: number, decimals: number): number {\n  return Number(Math.round(Number(value + \"e\" + decimals)) + \"e-\" + decimals);\n}\n\n/**\n * Rounds a number based on the specified rounding precision factor.\n * @param value The number to round.\n * @param precision The rounding factor (e.g., 0.01, 0.05, 1). Must be > 0.\n * @returns Rounded number.\n */\nexport function roundToPrecision(value: number, precision: number): number {\n  if (precision <= 0) {\n    console.warn(`Invalid rounding precision: ${precision}. Using 0.01.`);\n    precision = 0.01;\n  }\n  const multiplier = 1 / precision;\n  return Math.round(value * multiplier) / multiplier;\n}\n\n/**\n * Extracts query parameters from a URL\n * @param url The URL to parse\n * @returns An object with key-value pairs of query parameters\n */\nexport function getQueryParams(url?: string): Record<string, string> {\n  const urlToUse = url || (typeof window !== 'undefined' ? window.location.href : '');\n  const params: Record<string, string> = {};\n  if (!urlToUse) return params;\n\n  const searchParams = new URL(urlToUse).searchParams;\n  for (const [key, value] of searchParams.entries()) {\n    params[key] = value;\n  }\n  return params;\n}\n\n/**\n * Debounces a function to limit how often it can be called\n * @param fn The function to debounce\n * @param ms The debounce delay in milliseconds\n * @returns A debounced version of the function\n */\nexport function debounce<T extends (...args: unknown[]) => unknown>(\n  fn: T,\n  ms: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  return function(this: unknown, ...args: Parameters<T>) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(this, args), ms);\n  };\n}\n\n/**\n * Safely parses JSON with error handling\n * @param jsonString The JSON string to parse\n * @param fallback Optional fallback value if parsing fails\n * @returns The parsed object or the fallback\n */\nexport function safeJsonParse<T>(jsonString: string, fallback: T): T {\n  try {\n    return JSON.parse(jsonString) as T;\n  } catch (error) {\n    console.error('Error parsing JSON:', error);\n    return fallback;\n  }\n}\n","\"use client\";\n\nimport React, { createContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  SupportedLanguage,\n  changeLanguage,\n  getCurrentLanguage,\n  getLanguageFromPath,\n  initializeLanguage,\n} from \"@/lib/language-service\";\n\nimport { t as globalT } from \"@/translations\";\nimport { usePathname } from \"next/navigation\";\n\ninterface ITranslationContext {\n  language: SupportedLanguage;\n  t: typeof globalT;\n  changeLanguage: typeof changeLanguage;\n}\n\nconst defaultContextValue: ITranslationContext = {\n  language: \"en\",\n  t: (\n    key: string,\n    optionsOrDefaultValue?: Parameters<typeof globalT>[1],\n  ): string => {\n    const optionsAsObject =\n      typeof optionsOrDefaultValue === \"object\"\n        ? optionsOrDefaultValue\n        : undefined;\n    const defaultValueAsString =\n      typeof optionsOrDefaultValue === \"string\"\n        ? optionsOrDefaultValue\n        : undefined;\n\n    if (optionsAsObject?.defaultValue) {\n      return optionsAsObject.defaultValue;\n    }\n    if (defaultValueAsString) {\n      return defaultValueAsString;\n    }\n    return key;\n  },\n  changeLanguage: () => false,\n};\n\nexport const TranslationContext =\n  createContext<ITranslationContext>(defaultContextValue);\n\nexport default function TranslationProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname() || \"\";\n\n  const pathLanguage = getLanguageFromPath(pathname);\n\n  const [contextLang, setContextLang] = useState<SupportedLanguage>(\n    pathLanguage || getCurrentLanguage(),\n  );\n\n  useEffect(() => {\n    if (pathLanguage) {\n      initializeLanguage(pathLanguage);\n      setContextLang(pathLanguage);\n    } else {\n      const detectedLang = getCurrentLanguage();\n      setContextLang(detectedLang);\n    }\n  }, [pathLanguage]);\n\n  useEffect(() => {\n    if (pathLanguage && pathLanguage !== contextLang) {\n      initializeLanguage(pathLanguage);\n      setContextLang(pathLanguage);\n    }\n  }, [pathname, contextLang, pathLanguage]);\n\n  useEffect(() => {\n    const handleLanguageChanged = (e: Event) => {\n      const customEvent = e as CustomEvent;\n      const newLang = customEvent.detail?.language as SupportedLanguage;\n\n      if (newLang && newLang !== contextLang) {\n        setContextLang(newLang);\n      }\n    };\n\n    document.addEventListener(\"languageChanged\", handleLanguageChanged);\n    return () => {\n      document.removeEventListener(\"languageChanged\", handleLanguageChanged);\n    };\n  }, [contextLang]);\n\n  const handleChangeLanguage = (lang: SupportedLanguage): boolean => {\n    return changeLanguage(lang, { navigate: true });\n  };\n\n  const providerValue = useMemo(\n    () => ({\n      language: contextLang,\n      t: globalT,\n      changeLanguage: handleChangeLanguage,\n    }),\n    [contextLang],\n  );\n\n  return (\n    <TranslationContext.Provider value={providerValue}>\n      {children}\n    </TranslationContext.Provider>\n  );\n}\n"],"names":["translations","en","translation","enTranslations","de","deTranslations","t","key","optionsOrDefaultValue","lang","getCurrentLanguage","options","defaultValue","getTranslation","resource","namespace","undefined","parts","split","current","part","finalText","safeText","values","Object","keys","length","replaceValues","text","replace","match","replacement","trim","useTranslation","language","contextT","changeLanguage","contextChangeLanguage","useContext","TranslationContext","i18n","SUPPORTED_LANGUAGES","detectLanguage","DEFAULT_LANGUAGE","pathSegments","window","location","pathname","urlLang","includes","cookieLang","getCookie","value","document","cookie","name","pop","shift","LANGUAGE_COOKIE_NAME","storedLang","localStorage","getItem","LANGUAGE_STORAGE_KEY","browserLang","navigator","substring","toLowerCase","detectedLang","setItem","initializeLanguage","initialLanguage","currentLanguage","documentElement","setAttribute","classList","add","console","warn","setLanguageCookie","days","date","Date","setTime","getTime","toUTCString","expires","forEach","l","remove","event","CustomEvent","detail","dispatchEvent","navigate","newPath","join","href","getLanguageFromPath","path","segments","cn","inputs","twMerge","clsx","JSON","stringify","String","roundToDecimals","decimals","Number","Math","round","safeJsonParse","jsonString","fallback","parse","error","createContext","optionsAsObject","defaultValueAsString","TranslationProvider","children","usePathname","pathLanguage","contextLang","setContextLang","useState","useEffect","handleLanguageChanged","newLang","e","addEventListener","removeEventListener","handleChangeLanguage","providerValue","useMemo","globalT","Provider"],"sourceRoot":""}