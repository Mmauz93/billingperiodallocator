{"version":3,"file":"static/chunks/app/de/legal/terms-of-use/page-914226ebc6156a7d.js","mappings":"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","sources":["webpack://_N_E/./src/app/de/legal/terms-of-use/page.tsx","webpack://_N_E/?b9a5"],"sourcesContent":["\"use client\";\n\nimport { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport { SUPPORTED_LANGUAGES, getLanguageFromPath } from \"@/translations\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport dynamic from \"next/dynamic\";\nimport remarkGfm from \"remark-gfm\";\nimport { usePathname } from \"next/navigation\";\nimport { useTranslation } from \"@/translations\";\n\n// Create a NoSSR wrapper component with proper typing\nconst NoSSR = ({ children }: { children: ReactNode }) => {\n  return <>{children}</>;\n};\n\n// Define interface for component props\ninterface TermsOfUseContentProps {\n  termsContent: string;\n  isLoading: boolean;\n}\n\n// Use dynamic import with ssr: false to prevent SSR\nconst TermsOfUseContent = dynamic<TermsOfUseContentProps>(() => \n  Promise.resolve(({ termsContent, isLoading }: TermsOfUseContentProps) => {\n    return (\n      <article className=\"prose prose-lg dark:prose-invert\">\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-16\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\" />\n          </div>\n        ) : (\n          <div className=\"custom-markdown-container\">\n            <ReactMarkdown\n              remarkPlugins={[remarkGfm]}\n              components={{\n                h1: ({ ...props }) => <h1 {...props} className=\"text-2xl font-bold mt-12 mb-4 text-[#0284C7]\" />,\n                h2: ({ ...props }) => <h2 {...props} className=\"text-xl font-semibold mt-12 mb-4 text-[#0284C7]\" />,\n                h3: ({ ...props }) => <h3 {...props} className=\"text-lg font-medium mt-10 mb-3 text-[#0284C7]\" />,\n                p: ({ ...props }) => <p {...props} className=\"text-sm leading-relaxed text-muted-foreground mb-6\" />,\n                ul: ({ ...props }) => <ul {...props} className=\"text-sm leading-relaxed text-muted-foreground mb-6 pl-6 list-disc\" />,\n                ol: ({ ...props }) => <ol {...props} className=\"text-sm leading-relaxed text-muted-foreground mb-6 pl-6 list-decimal\" />,\n                li: ({ ...props }) => <li {...props} className=\"mb-2\" />,\n                a: ({ ...props }) => <a {...props} className=\"text-[#0284C7] hover:underline\" />,\n                strong: ({ ...props }) => <strong {...props} className=\"font-semibold\" />,\n              }}\n            >  \n              {termsContent}\n            </ReactMarkdown>\n          </div>\n        )}\n      </article>\n    );\n  }), \n  { ssr: false }\n);\n\nexport default function TermsOfUsePageDE() {\n  const { i18n, t } = useTranslation();\n  const pathname = usePathname();\n  const [termsContent, setTermsContent] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [langPrefix, setLangPrefix] = useState(\"de\");\n  const [isMounted, setIsMounted] = useState(false);\n  \n  // Function to load terms content - MOVED AND WRAPPED IN useCallback\n  const loadTerms = useCallback(async (lang: string) => {\n    setIsLoading(true);\n    try {\n      // Determine file path based on language\n      const langSuffix = lang === 'de' ? '.de' : '';\n      const response = await fetch(`/terms-of-use${langSuffix}.md`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to load terms');\n      }\n      \n      const content = await response.text();\n      // Remove the first heading and date line to avoid duplication\n      const processedContent = content\n        .replace(/^# .*$/m, '') // Remove the first heading\n        .replace(/^Last updated on.*$/m, '') // Remove the date line for English\n        .replace(/^Zuletzt aktualisiert am.*$/m, '') // Remove the date line for German\n        .trim();\n      \n      setTermsContent(processedContent);\n    } catch (error) {\n      console.error('Error loading terms of use:', error);\n      setTermsContent(lang === 'de' \n        ? 'Die Nutzungsbedingungen konnten nicht geladen werden. Bitte versuchen Sie es spÃ¤ter erneut.' \n        : 'Failed to load terms of use. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [setIsLoading, setTermsContent]); // Dependencies for useCallback\n  \n  // Get current URL language - this ensures we don't fight with the URL's language\n  const getUrlLanguage = useCallback(() => {\n    if (!pathname) return 'de';\n    const pathLanguage = getLanguageFromPath(pathname);\n    return pathLanguage || 'de';\n  }, [pathname]); // Added pathname as a dependency\n  \n  // First effect to handle mounting only\n  useEffect(() => {\n    if (!isMounted) {\n    setIsMounted(true);\n    } else {\n    // Set language prefix from URL\n    const urlLang = getUrlLanguage();\n    setLangPrefix(urlLang);\n    \n    // Sync i18n with URL language\n    if (i18n.language !== urlLang) {\n      i18n.changeLanguage(urlLang);\n    }\n    \n    // Load terms based on current language\n    loadTerms(urlLang);\n    }\n    // Set title after i18n might have changed language\n    document.title = t(\"Legal.termsOfUseTitle\") + \" | BillSplitter\";\n  }, [isMounted, getUrlLanguage, i18n, loadTerms, t]); // Adjusted dependencies, added t\n  \n  // Listen for language change events from the language toggler\n  useEffect(() => {\n    if (!isMounted) return;\n    \n    const handleLanguageChanged = (e: Event) => {\n      const customEvent = e as CustomEvent;\n      const newLang = customEvent.detail?.language || customEvent.detail;\n      \n      if (newLang && typeof newLang === 'string' && SUPPORTED_LANGUAGES.includes(newLang)) {\n        setLangPrefix(newLang);\n        loadTerms(newLang);\n      }\n    };\n    \n    document.addEventListener('languageChanged', handleLanguageChanged);\n    \n    return () => {\n      document.removeEventListener('languageChanged', handleLanguageChanged);\n    };\n  }, [isMounted, loadTerms]); // loadTerms is now stable\n  \n  // Effect for pathname changes\n  useEffect(() => {\n    if (!isMounted) return;\n    \n    const urlLang = getUrlLanguage();\n    \n    // If URL language doesn't match current language prefix, update\n    if (urlLang !== langPrefix) {\n      setLangPrefix(urlLang);\n      loadTerms(urlLang);\n      \n      // Sync i18n with URL\n      if (i18n.language !== urlLang) {\n        i18n.changeLanguage(urlLang);\n      }\n    }\n  }, [pathname, isMounted, langPrefix, i18n, getUrlLanguage, loadTerms]); // Adjusted dependencies\n  \n  const formattedDate = new Date().toLocaleDateString('de-DE', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n\n  // Determine H1 title based on mount state to avoid hydration mismatch\n  const h1Title = isMounted ? t(\"Legal.termsOfUseTitle\", \"Nutzungsbedingungen\") : \"Terms of Use\";\n  \n  return (\n    <main className=\"container mx-auto max-w-3xl px-6 py-16\">\n      <div className=\"mb-10 text-center\">\n        <h1 className=\"text-3xl font-bold text-[#0284C7]\">\n          {h1Title}\n        </h1>\n        {isMounted && (\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            {t(\"Legal.lastUpdatedPrefix\", \"Zuletzt aktualisiert am\")} {formattedDate}\n          </p>\n        )}\n      </div>\n      <NoSSR>\n        <TermsOfUseContent \n          termsContent={termsContent} \n          isLoading={isLoading}\n        />\n      </NoSSR>\n    </main>\n  );\n} \n","import(/* webpackMode: \"eager\" */ \"C:\\\\Users\\\\Mauro\\\\Repos\\\\Siempi\\\\Saas\\\\billingperiodallocator\\\\src\\\\app\\\\de\\\\legal\\\\terms-of-use\\\\page.tsx\");\n"],"names":["NoSSR","children","TermsOfUseContent","dynamic","Promise","resolve","termsContent","isLoading","article","className","div","ReactMarkdown","remarkPlugins","remarkGfm","components","h1","props","h2","h3","p","ul","ol","li","a","strong","ssr","TermsOfUsePageDE","i18n","t","useTranslation","pathname","usePathname","setTermsContent","useState","setIsLoading","langPrefix","setLangPrefix","isMounted","setIsMounted","loadTerms","useCallback","lang","response","fetch","ok","processedContent","content","text","replace","error","console","getUrlLanguage","getLanguageFromPath","useEffect","urlLang","language","changeLanguage","document","title","handleLanguageChanged","customEvent","newLang","detail","SUPPORTED_LANGUAGES","includes","addEventListener","removeEventListener","formattedDate","Date","toLocaleDateString","year","month","day","h1Title","main"],"sourceRoot":""}