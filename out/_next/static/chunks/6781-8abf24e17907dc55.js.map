{"version":3,"file":"static/chunks/6781-8abf24e17907dc55.js","mappings":"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","sources":["webpack://_N_E/./src/lib/translation.ts","webpack://_N_E/./src/translations.ts","webpack://_N_E/./src/lib/utils.ts"],"sourcesContent":["/**\r\n * Simple, direct translation system with zero eval() usage\r\n */\r\n\r\nimport deTranslations from '../messages/de.json';\r\nimport enTranslations from '../messages/en.json';\r\nimport { safeText } from './utils';\r\n\r\n// Type safety for translation objects\r\ntype TranslationResource = Record<string, string | Record<string, string>>;\r\ntype NestedTranslations = Record<string, TranslationResource>;\r\n\r\ninterface TranslationOptions {\r\n  defaultValue?: string;\r\n  values?: Record<string, string | number>;\r\n}\r\n\r\n// Translations store\r\nconst translations: Record<string, NestedTranslations> = {\r\n  en: { translation: enTranslations as TranslationResource },\r\n  de: { translation: deTranslations as TranslationResource },\r\n};\r\n\r\n// Current language state\r\nlet currentLanguage = 'en';\r\nconst STORAGE_KEY = 'billingperiodallocator-language';\r\n\r\n// Language detection at initialization\r\nif (typeof window !== 'undefined') {\r\n  // Try to get language from URL path\r\n  const pathSegments = window.location.pathname.split('/');\r\n  const urlLang = pathSegments.length > 1 && ['en', 'de'].includes(pathSegments[1]) \r\n                ? pathSegments[1] \r\n                : null;\r\n  \r\n  // If not in URL, check localStorage, then browser preference\r\n  currentLanguage = urlLang || \r\n                  localStorage.getItem(STORAGE_KEY) || \r\n                  (navigator.language && \r\n                  ['en', 'de'].includes(navigator.language.substring(0, 2).toLowerCase())\r\n                    ? navigator.language.substring(0, 2).toLowerCase()\r\n                    : 'en');\r\n}\r\n\r\n/**\r\n * Get a translated string with NO eval\r\n * Compatible with i18next API - accepts either options object or defaultValue string\r\n */\r\nexport function t(key: string, optionsOrDefaultValue?: TranslationOptions | string): string {\r\n  let options: TranslationOptions = {};\r\n  \r\n  // Handle i18next compatibility where second param can be defaultValue string\r\n  if (typeof optionsOrDefaultValue === 'string') {\r\n    options = { defaultValue: optionsOrDefaultValue };\r\n  } else if (optionsOrDefaultValue) {\r\n    options = optionsOrDefaultValue;\r\n  }\r\n  \r\n  // Get the translation or default value\r\n  const translation = getTranslation(key, currentLanguage);\r\n  \r\n  // Ensure we always have a string, not an object (prevents React Error #418)\r\n  const finalText = safeText(translation || options.defaultValue || key);\r\n  \r\n  // Replace any {{key}} values\r\n  if (options.values && Object.keys(options.values).length > 0) {\r\n    return replaceValues(finalText, options.values);\r\n  }\r\n  \r\n  return finalText;\r\n}\r\n\r\n/**\r\n * Change the current language\r\n */\r\nexport function changeLanguage(lang: string): void {\r\n  if (lang === currentLanguage) return;\r\n  \r\n  // Only allow supported languages\r\n  if (!['en', 'de'].includes(lang)) return;\r\n  \r\n  currentLanguage = lang;\r\n  \r\n  // Save to localStorage\r\n  if (typeof window !== 'undefined') {\r\n    localStorage.setItem(STORAGE_KEY, lang);\r\n    document.documentElement.lang = lang;\r\n    \r\n    // Dispatch event for components to know language changed\r\n    const event = new CustomEvent('languageChanged', { detail: { language: lang } });\r\n    document.dispatchEvent(event);\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current language\r\n */\r\nexport function getLanguage(): string {\r\n  return currentLanguage;\r\n}\r\n\r\n/**\r\n * Get a translation from the nested structure with dot notation\r\n * This is a safer implementation without eval()\r\n */\r\nfunction getTranslation(key: string, lang: string): string | undefined {\r\n  // Get correct namespace\r\n  const namespace = 'translation'; // We only use a single namespace\r\n  const resource = translations[lang]?.[namespace];\r\n  \r\n  if (!resource) return undefined;\r\n  \r\n  // Handle dot notation (e.g., \"header.title\")\r\n  const parts = key.split('.');\r\n  let current: unknown = resource;\r\n  \r\n  // Navigate down the object path\r\n  for (const part of parts) {\r\n    if (current === undefined || current === null || typeof current !== 'object') {\r\n      return undefined;\r\n    }\r\n    \r\n    // Type assertion since we've checked current is an object\r\n    current = (current as Record<string, unknown>)[part];\r\n  }\r\n  \r\n  // Return the found string or undefined - but ensure it's a string\r\n  return typeof current === 'string' ? current : undefined;\r\n}\r\n\r\n/**\r\n * Replace {{key}} placeholders in a string with values\r\n */\r\nfunction replaceValues(text: string, values: Record<string, string | number>): string {\r\n  return text.replace(/\\{\\{([^{}]+)\\}\\}/g, (match, key) => {\r\n    const replacement = values[key.trim()];\r\n    // Ensure replacement is always a string\r\n    return replacement !== undefined ? safeText(replacement) : match;\r\n  });\r\n}\r\n\r\n// Helper function to extract language from URL path\r\nexport function getLanguageFromPath(path: string): string | null {\r\n  if (!path) return null;\r\n  \r\n  const segments = path.split('/');\r\n  if (segments.length > 1 && ['en', 'de'].includes(segments[1])) {\r\n    return segments[1];\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// Simple functions to mimic i18next interface for easier migration\r\nexport const i18n = {\r\n  changeLanguage,\r\n  language: currentLanguage,\r\n  t\r\n};\r\n\r\n// Export a hook-like function for React components\r\nexport function useTranslation() {\r\n  return { \r\n    t,\r\n    i18n: {\r\n      language: currentLanguage,\r\n      changeLanguage\r\n    }\r\n  };\r\n} \r\n ","/**\r\n * Translation system entry point - 100% eval-free\r\n * This file replaces i18n-client.ts with a simpler implementation\r\n */\r\n\r\nimport { getLanguage } from './lib/translation';\r\n\r\nexport { \r\n  t,\r\n  i18n,\r\n  useTranslation,\r\n  changeLanguage,\r\n  getLanguage,\r\n  getLanguageFromPath\r\n} from './lib/translation';\r\n\r\n// Constants exported for backward compatibility with existing code\r\nexport const LANGUAGE_STORAGE_KEY = 'billingperiodallocator-language';\r\nexport const DEFAULT_LANGUAGE = 'en';\r\nexport const SUPPORTED_LANGUAGES = ['en', 'de'];\r\n\r\n// For backward compatibility with existing code\r\nexport const getCurrentLanguage = getLanguage; \r\n ","import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Safely converts any value to a string to prevent React error #418\r\n * This helps when displaying dynamic content that might be objects\r\n */\r\nexport function safeText(value: unknown): string {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n  \r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  \r\n  if (typeof value === 'object') {\r\n    try {\r\n      return JSON.stringify(value);\r\n    } catch {\r\n      return '[Object]';\r\n    }\r\n  }\r\n  \r\n  return String(value);\r\n}\r\n"],"names":["translations","en","translation","enTranslations","de","deTranslations","currentLanguage","STORAGE_KEY","pathSegments","window","location","pathname","split","urlLang","length","includes","localStorage","getItem","navigator","language","substring","toLowerCase","t","key","optionsOrDefaultValue","options","defaultValue","getTranslation","lang","resource","namespace","undefined","parts","current","part","finalText","safeText","values","Object","keys","text","replace","match","replacement","trim","changeLanguage","setItem","document","documentElement","event","CustomEvent","detail","dispatchEvent","getLanguageFromPath","path","segments","i18n","useTranslation","LANGUAGE_STORAGE_KEY","getCurrentLanguage","getLanguage","cn","inputs","twMerge","clsx","value","JSON","stringify","String"],"sourceRoot":""}