{"version":3,"file":"static/chunks/6689-95d2e1a8d15006a0.js","mappings":"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","sources":["webpack://_N_E/./src/lib/translation.ts","webpack://_N_E/./src/translations.ts","webpack://_N_E/./src/lib/utils.ts","webpack://_N_E/./src/components/translation-provider.tsx"],"sourcesContent":["/**\r\n * Simple, direct translation system with zero eval() usage\r\n */\r\n\r\nimport { TranslationContext } from '../components/translation-provider';\r\nimport deTranslations from '../messages/de.json';\r\nimport enTranslations from '../messages/en.json';\r\nimport { safeText } from './utils';\r\nimport { useContext } from 'react';\r\n\r\n// Type safety for translation objects\r\ntype TranslationResource = Record<string, string | Record<string, string>>;\r\ntype NestedTranslations = Record<string, TranslationResource>;\r\n\r\ninterface TranslationOptions {\r\n  defaultValue?: string;\r\n  values?: Record<string, string | number>;\r\n}\r\n\r\n// Translations store\r\nconst translations: Record<string, NestedTranslations> = {\r\n  en: { translation: enTranslations as TranslationResource },\r\n  de: { translation: deTranslations as TranslationResource },\r\n};\r\n\r\n// Language-related constants\r\nconst SUPPORTED_LANGUAGES = ['en', 'de'];\r\nconst DEFAULT_LANGUAGE = 'en';\r\nconst STORAGE_KEY = 'billingperiodallocator-language';\r\n\r\n// Use serverLanguage during initial SSR to prevent language flash\r\n// This is important - we initialize with an empty string rather than 'en'\r\n// to indicate no language has been detected yet\r\nlet currentLanguage: string = '';\r\n\r\n// Prevent language flash by ensuring current language is set correctly from the start\r\n// This function will be called both during server-side rendering AND client hydration\r\nfunction detectLanguage(): string {\r\n  // If language already set, don't re-detect\r\n  if (currentLanguage) return currentLanguage;\r\n  \r\n  // On server, we can't access window/localStorage, but Next.js provides the URL\r\n  let detectedLang = DEFAULT_LANGUAGE; // Default as fallback\r\n  \r\n  if (typeof window !== 'undefined') {\r\n    // CLIENT-SIDE detection (hydration phase)\r\n    \r\n    // 1. First priority: Get language from URL path (most reliable indicator)\r\n    const pathSegments = window.location.pathname.split('/');\r\n    const urlLang = pathSegments.length > 1 && SUPPORTED_LANGUAGES.includes(pathSegments[1])\r\n      ? pathSegments[1]\r\n      : null;\r\n    \r\n    // 2. Second priority: Check localStorage for saved preference\r\n    const storedLang = localStorage.getItem(STORAGE_KEY);\r\n    \r\n    // 3. Third priority: Check browser language\r\n    const browserLang = navigator.language && \r\n      SUPPORTED_LANGUAGES.includes(navigator.language.substring(0, 2).toLowerCase())\r\n        ? navigator.language.substring(0, 2).toLowerCase()\r\n        : null;\r\n    \r\n    // Use URL language (highest priority) or stored or browser language or default\r\n    detectedLang = urlLang || storedLang || browserLang || DEFAULT_LANGUAGE;\r\n    \r\n    // Update localStorage if we're using URL language but storage doesn't match\r\n    if (urlLang && storedLang !== urlLang) {\r\n      localStorage.setItem(STORAGE_KEY, urlLang);\r\n    }\r\n    \r\n    // Set html lang attribute for accessibility\r\n    document.documentElement.lang = detectedLang;\r\n  } else {\r\n    // SERVER-SIDE detection: Can't detect much, will rely on Next.js's params\r\n    // Will be updated during client-side hydration\r\n    detectedLang = DEFAULT_LANGUAGE;\r\n  }\r\n  \r\n  // Set the current language\r\n  currentLanguage = detectedLang;\r\n  return detectedLang;\r\n}\r\n\r\n// Initial detection call (will run during both SSR and client hydration)\r\ndetectLanguage();\r\n\r\n/**\r\n * Get a translated string with NO eval\r\n * Compatible with i18next API - accepts either options object or defaultValue string\r\n */\r\nexport function t(key: string, optionsOrDefaultValue?: TranslationOptions | string): string {\r\n  // Ensure current language is set before translations are accessed\r\n  const lang = currentLanguage || detectLanguage();\r\n  \r\n  let options: TranslationOptions = {};\r\n  \r\n  // Handle i18next compatibility where second param can be defaultValue string\r\n  if (typeof optionsOrDefaultValue === 'string') {\r\n    options = { defaultValue: optionsOrDefaultValue };\r\n  } else if (optionsOrDefaultValue) {\r\n    options = optionsOrDefaultValue;\r\n  }\r\n  \r\n  // Get the translation or default value\r\n  const translation = getTranslation(key, lang);\r\n  \r\n  // Ensure we always have a string, not an object (prevents React Error #418)\r\n  const finalText = safeText(translation || options.defaultValue || key);\r\n  \r\n  // Replace any {{key}} values\r\n  if (options.values && Object.keys(options.values).length > 0) {\r\n    return replaceValues(finalText, options.values);\r\n  }\r\n  \r\n  return finalText;\r\n}\r\n\r\n/**\r\n * Change the current language\r\n */\r\nexport function changeLanguage(lang: string): void {\r\n  if (lang === currentLanguage) return;\r\n  \r\n  // Only allow supported languages\r\n  if (!SUPPORTED_LANGUAGES.includes(lang)) return;\r\n  \r\n  currentLanguage = lang;\r\n  \r\n  // Save to localStorage\r\n  if (typeof window !== 'undefined') {\r\n    localStorage.setItem(STORAGE_KEY, lang);\r\n    document.documentElement.lang = lang;\r\n    \r\n    // Dispatch event for components to know language changed\r\n    const event = new CustomEvent('languageChanged', { detail: { language: lang } });\r\n    document.dispatchEvent(event);\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current language\r\n */\r\nexport function getLanguage(): string {\r\n  // Ensure language is detected if this is called early\r\n  return currentLanguage || detectLanguage();\r\n}\r\n\r\n/**\r\n * Get a translation from the nested structure with dot notation\r\n * This is a safer implementation without eval()\r\n */\r\nfunction getTranslation(key: string, lang: string): string | undefined {\r\n  // Get correct namespace\r\n  const namespace = 'translation'; // We only use a single namespace\r\n  const resource = translations[lang]?.[namespace];\r\n  \r\n  if (!resource) return undefined;\r\n  \r\n  // Handle dot notation (e.g., \"header.title\")\r\n  const parts = key.split('.');\r\n  let current: unknown = resource;\r\n  \r\n  // Navigate down the object path\r\n  for (const part of parts) {\r\n    if (current === undefined || current === null || typeof current !== 'object') {\r\n      return undefined;\r\n    }\r\n    \r\n    // Type assertion since we've checked current is an object\r\n    current = (current as Record<string, unknown>)[part];\r\n  }\r\n  \r\n  // Return the found string or undefined - but ensure it's a string\r\n  return typeof current === 'string' ? current : undefined;\r\n}\r\n\r\n/**\r\n * Replace {{key}} placeholders in a string with values\r\n */\r\nfunction replaceValues(text: string, values: Record<string, string | number>): string {\r\n  return text.replace(/\\{\\{([^{}]+)\\}\\}/g, (match, key) => {\r\n    const replacement = values[key.trim()];\r\n    // Ensure replacement is always a string\r\n    return replacement !== undefined ? safeText(replacement) : match;\r\n  });\r\n}\r\n\r\n// Helper function to extract language from URL path\r\nexport function getLanguageFromPath(path: string): string | null {\r\n  if (!path) return null;\r\n  \r\n  const segments = path.split('/');\r\n  if (segments.length > 1 && SUPPORTED_LANGUAGES.includes(segments[1])) {\r\n    return segments[1];\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// Simple functions to mimic i18next interface for easier migration\r\nexport const i18n = {\r\n  changeLanguage,\r\n  language: getLanguage(),\r\n  t\r\n};\r\n\r\n// Export a hook-like function for React components\r\nexport function useTranslation() {\r\n  const { language, t: contextT, changeLanguage: contextChangeLanguage } = useContext(TranslationContext);\r\n\r\n  // The t function from context already uses the correct language.\r\n  // The changeLanguage function from context will update the provider and global state.\r\n  return { \r\n    t: contextT,\r\n    i18n: {\r\n      language: language, // Use language from context\r\n      changeLanguage: contextChangeLanguage // Use changeLanguage from context\r\n    }\r\n  };\r\n}\r\n\r\n// Enhanced Server-Side Translator function that gets language from params\r\nexport function getServerSideTranslator(lang: string) {\r\n  if (!SUPPORTED_LANGUAGES.includes(lang)) {\r\n    // Default to 'en' or throw an error if an unsupported language is passed\r\n    // console.warn(`Unsupported language \"${lang}\" for getServerSideTranslator, defaulting to 'en'.`);\r\n    lang = DEFAULT_LANGUAGE; \r\n  }\r\n\r\n  // Update the currentLanguage on the server to match what we'll use\r\n  // This helps prevent language flash during hydration\r\n  if (typeof window === 'undefined') {\r\n    currentLanguage = lang;\r\n  }\r\n\r\n  return {\r\n    t: (key: string, optionsOrDefaultValue?: TranslationOptions | string): string => {\r\n      let options: TranslationOptions = {};\r\n      if (typeof optionsOrDefaultValue === 'string') {\r\n        options = { defaultValue: optionsOrDefaultValue };\r\n      } else if (optionsOrDefaultValue) {\r\n        options = optionsOrDefaultValue;\r\n      }\r\n\r\n      const translation = getTranslation(key, lang); // Use the passed 'lang'\r\n      const finalText = safeText(translation || options.defaultValue || key);\r\n\r\n      if (options.values && Object.keys(options.values).length > 0) {\r\n        return replaceValues(finalText, options.values);\r\n      }\r\n      return finalText;\r\n    },\r\n    language: lang // Expose the language for consistency\r\n  };\r\n} \r\n ","/**\r\n * Translation system entry point - 100% eval-free\r\n * This file replaces i18n-client.ts with a simpler implementation\r\n */\r\n\r\nimport { getLanguage } from './lib/translation';\r\n\r\nexport { \r\n  t,\r\n  i18n,\r\n  useTranslation,\r\n  changeLanguage,\r\n  getLanguage,\r\n  getLanguageFromPath\r\n} from './lib/translation';\r\n\r\n// Constants exported for backward compatibility with existing code\r\nexport const LANGUAGE_STORAGE_KEY = 'billingperiodallocator-language';\r\nexport const DEFAULT_LANGUAGE = 'en';\r\nexport const SUPPORTED_LANGUAGES = ['en', 'de'];\r\n\r\n// For backward compatibility with existing code\r\nexport const getCurrentLanguage = getLanguage; \r\n ","import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Safely converts any value to a string to prevent React error #418\r\n * This helps when displaying dynamic content that might be objects\r\n */\r\nexport function safeText(value: unknown): string {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n  \r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  \r\n  if (typeof value === 'object') {\r\n    try {\r\n      return JSON.stringify(value);\r\n    } catch {\r\n      return '[Object]';\r\n    }\r\n  }\r\n  \r\n  return String(value);\r\n}\r\n","'use client';\r\n\r\nimport React, { createContext, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n  SUPPORTED_LANGUAGES,\r\n  getLanguageFromPath,\r\n  changeLanguage as globalChangeLanguage,\r\n  t as globalT,\r\n} from '@/translations';\r\n\r\nimport { usePathname } from 'next/navigation';\r\n\r\n// Define the shape of the context value\r\ninterface ITranslationContext {\r\n  language: string;\r\n  t: typeof globalT;\r\n  changeLanguage: typeof globalChangeLanguage;\r\n}\r\n\r\n// Default context values\r\nconst defaultContextValue: ITranslationContext = {\r\n  language: 'en',\r\n  t: (key: string, optionsOrDefaultValue?: Parameters<typeof globalT>[1]): string => {\r\n    const optionsAsObject = typeof optionsOrDefaultValue === 'object' ? optionsOrDefaultValue : undefined;\r\n    const defaultValueAsString = typeof optionsOrDefaultValue === 'string' ? optionsOrDefaultValue : undefined;\r\n\r\n    if (optionsAsObject?.defaultValue) {\r\n      return optionsAsObject.defaultValue;\r\n    }\r\n    if (defaultValueAsString) {\r\n      return defaultValueAsString;\r\n    }\r\n    return key;\r\n  },\r\n  changeLanguage: () => {}, // No-op - user should use navigation instead\r\n};\r\n\r\n// Initialize context with safe default values\r\nexport const TranslationContext = createContext<ITranslationContext>(defaultContextValue);\r\n\r\nexport default function TranslationProvider({ children }: { children: React.ReactNode }) {\r\n  const pathname = usePathname() || '';\r\n  \r\n  // Get language from path - the authoritative source\r\n  const pathLanguage = getLanguageFromPath(pathname);\r\n  \r\n  // State to hold current language\r\n  const [contextLang, setContextLang] = useState<string>(pathLanguage || 'en');\r\n\r\n  // Update global language state when path changes\r\n  useEffect(() => {\r\n    if (pathLanguage && pathLanguage !== contextLang) {\r\n      setContextLang(pathLanguage);\r\n      globalChangeLanguage(pathLanguage);\r\n    }\r\n  }, [pathname, contextLang, pathLanguage]);\r\n\r\n  // Listen for language change events (from the [lang]/layout.tsx script)\r\n  useEffect(() => {\r\n    const handleLanguageChanged = (e: Event) => {\r\n      const customEvent = e as CustomEvent;\r\n      const newLang = customEvent.detail?.language || '';\r\n      \r\n      if (newLang && SUPPORTED_LANGUAGES.includes(newLang) && newLang !== contextLang) {\r\n        setContextLang(newLang);\r\n        globalChangeLanguage(newLang);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('languageChanged', handleLanguageChanged);\r\n    return () => {\r\n      document.removeEventListener('languageChanged', handleLanguageChanged);\r\n    };\r\n  }, [contextLang]);\r\n\r\n  // Memoize the context value to avoid unnecessary re-renders\r\n  const providerValue = useMemo(() => ({\r\n    language: contextLang,\r\n    t: globalT,\r\n    changeLanguage: globalChangeLanguage,\r\n  }), [contextLang]);\r\n\r\n  return (\r\n    <TranslationContext.Provider value={providerValue}>\r\n      {children}\r\n    </TranslationContext.Provider>\r\n  );\r\n} \r\n "],"names":["translations","en","translation","enTranslations","de","deTranslations","SUPPORTED_LANGUAGES","currentLanguage","detectLanguage","detectedLang","pathSegments","window","DEFAULT_LANGUAGE","location","pathname","split","urlLang","length","includes","storedLang","localStorage","getItem","STORAGE_KEY","browserLang","navigator","language","substring","toLowerCase","setItem","document","documentElement","lang","t","key","optionsOrDefaultValue","options","defaultValue","getTranslation","resource","namespace","undefined","parts","current","part","finalText","safeText","values","Object","keys","replaceValues","text","replace","match","replacement","trim","changeLanguage","event","CustomEvent","detail","dispatchEvent","getLanguage","getLanguageFromPath","path","segments","useTranslation","contextT","contextChangeLanguage","useContext","TranslationContext","i18n","LANGUAGE_STORAGE_KEY","cn","inputs","twMerge","clsx","value","JSON","stringify","String","createContext","optionsAsObject","defaultValueAsString","TranslationProvider","children","usePathname","pathLanguage","contextLang","setContextLang","useState","useEffect","globalChangeLanguage","handleLanguageChanged","newLang","e","addEventListener","removeEventListener","providerValue","useMemo","globalT","Provider"],"sourceRoot":""}