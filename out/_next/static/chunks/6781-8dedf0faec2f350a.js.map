{"version":3,"file":"static/chunks/6781-8dedf0faec2f350a.js","mappings":"u6XAiBMA,EAAmD,CACvDC,GAAI,CAAEC,aAAaC,kBAAcA,kgUAAwB,EACzDC,GAAI,CAAEF,YAAaG,CAAsC,CAC3D,EAGIC,EAAkB,KAChBC,EAAc,KALeF,4BAQA,EAEjC,IAAMG,EAAeC,OAAOC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAAC,KAMpDN,EALgBE,GAAaK,MAAM,CAAG,GAAK,CAAC,KAAM,KAAK,CAACC,QAAQ,CAACN,CAAY,CAAC,EAAE,EAChEA,CAAY,CAAC,EAAE,CACf,OAIAO,aAAaC,OAAO,CAACT,KACpBU,UAAUC,CAAVD,OAAkB,EACnB,CAAC,KAAM,KAAK,CAACH,QAAQ,CAACG,UAAUC,QAAQ,CAACC,SAAS,CAAC,EAAG,GAAGC,WAAW,IAChEH,UAAUC,QAAQ,CAACC,SAAS,CAAC,EAAG,GAAGC,WAAW,GAC9C,KAAG,CAOlB,SAASC,EAAEC,CAAW,CAAEC,CAAmD,QAmF7CC,EAlFnC,IAAIC,EAA8B,CAAC,CAG/B,CAAiC,UAAU,OAApCF,EACTE,EAAU,CAAEC,aAAcH,CAAsB,EACvCA,IACTE,EAAUF,CAAAA,EAKZ,IAAMI,EADcC,QALc,CAiD3BA,CAA0B,CAAEC,CAAY,MAG9B7B,EAAjB,IAAM8B,EAAAA,OAAW9B,EAAAA,CAAY,CAAC6B,EAAAA,EAAb7B,KAAAA,EAAAA,EADC,GACDA,QAA+B,CAEhD,GAHiC,CACI,CAAC+B,CAEvB,OAAOC,IAGhBC,EAAQX,EAAIV,KAAK,CAAC,KACpBsB,EAAmBJ,EAP2C,IAU7D,IAAMK,KAAQF,EAAO,CACxB,GAAIC,SAAgE,GAApDF,OAAiC,MAApBE,CAA2BA,EACtD,OAIFA,EALyC,CAKK,CAACC,EAAK,CAItD,MAA0B,UAAnB,OAAOD,EAAuBA,OAAUF,CACjD,EAnEqCV,EAAKhB,IACPmB,EAAQC,YAAY,EAAIJ,SAGzD,EAAYE,MAAM,EAAIY,OAAOC,IAAI,CAACZ,EAAQD,MAAM,EAAEX,MAAM,CAAG,GAAG,EACvCc,EAmEU,EAnECF,EAAQD,MAAM,CAoEzCc,EAAKC,OAAO,CAAC,oBAAqB,CAACC,EAAOlB,KAC/C,IAAMmB,EAAcjB,CAAM,CAACF,EAAIoB,IAAI,GAAG,CACtC,OAAOD,WAA4BE,OAAOF,GAAeD,CAC3D,IApEOb,CACT,CAKO,SAASiB,EAAef,CAAY,EACzC,GAAIA,IAASvB,GAGR,CAAC,KAAM,KAAK,CAACQ,EAHY,MAGJ,CAACe,IAE3BvB,EAAkBuB,CAFgB,EAMhCd,aAAa8B,OAAO,CAACtC,EAAasB,GAClCiB,SAASC,eAAe,CAAClB,IAAI,CAAGA,EAGhC,IAAMmB,EAAQ,IAAIC,YAAY,kBAAmB,CAAEC,OAAQ,CAAEhC,SAAUW,CAAK,CAAE,GAC9EiB,SAASK,aAAa,CAACH,EACzB,EACF,CAiDO,SAASI,EAAoBC,CAAY,EAC9C,GAAI,CAACA,EAAM,OAAO,KAElB,IAAMC,EAAWD,EAAKzC,KAAK,CAAC,YAC5B,EAAaC,MAAM,CAAG,GAAK,CAAC,KAAM,KAAK,CAACC,QAAQ,CAACwC,CAAQ,CAAC,EAAE,EACnDA,CADsD,CAC7C,EAAE,CAGb,IACT,CAGO,IAAMC,EAAO,gBAClBX,EACA1B,SAAUZ,IACVe,CACF,EAAE,SAGcmC,IACd,MAAO,GACLnC,EACAkC,KAAM,CACJrC,SAAUZ,iBACVsC,CACF,CACF,CACF,CCpJO,IAAMa,EAAuB,kCAAkC,EAEnC,CAAC,KAAM,KAAK,CAAC,ED2EzC,SAASC,EACd,OAAOpD,CACT","sources":["webpack://_N_E/./src/lib/translation.ts","webpack://_N_E/./src/translations.ts"],"sourcesContent":["/**\n * Simple, direct translation system with zero eval() usage\n */\n\nimport deTranslations from '../messages/de.json';\nimport enTranslations from '../messages/en.json';\n\n// Type safety for translation objects\ntype TranslationResource = Record<string, string | Record<string, string>>;\ntype NestedTranslations = Record<string, TranslationResource>;\n\ninterface TranslationOptions {\n  defaultValue?: string;\n  values?: Record<string, string | number>;\n}\n\n// Translations store\nconst translations: Record<string, NestedTranslations> = {\n  en: { translation: enTranslations as TranslationResource },\n  de: { translation: deTranslations as TranslationResource },\n};\n\n// Current language state\nlet currentLanguage = 'en';\nconst STORAGE_KEY = 'billingperiodallocator-language';\n\n// Language detection at initialization\nif (typeof window !== 'undefined') {\n  // Try to get language from URL path\n  const pathSegments = window.location.pathname.split('/');\n  const urlLang = pathSegments.length > 1 && ['en', 'de'].includes(pathSegments[1]) \n                ? pathSegments[1] \n                : null;\n  \n  // If not in URL, check localStorage, then browser preference\n  currentLanguage = urlLang || \n                  localStorage.getItem(STORAGE_KEY) || \n                  (navigator.language && \n                  ['en', 'de'].includes(navigator.language.substring(0, 2).toLowerCase())\n                    ? navigator.language.substring(0, 2).toLowerCase()\n                    : 'en');\n}\n\n/**\n * Get a translated string with NO eval\n * Compatible with i18next API - accepts either options object or defaultValue string\n */\nexport function t(key: string, optionsOrDefaultValue?: TranslationOptions | string): string {\n  let options: TranslationOptions = {};\n  \n  // Handle i18next compatibility where second param can be defaultValue string\n  if (typeof optionsOrDefaultValue === 'string') {\n    options = { defaultValue: optionsOrDefaultValue };\n  } else if (optionsOrDefaultValue) {\n    options = optionsOrDefaultValue;\n  }\n  \n  // Get the translation or default value\n  const translation = getTranslation(key, currentLanguage);\n  const finalText = translation || options.defaultValue || key;\n  \n  // Replace any {{key}} values\n  if (options.values && Object.keys(options.values).length > 0) {\n    return replaceValues(finalText, options.values);\n  }\n  \n  return finalText;\n}\n\n/**\n * Change the current language\n */\nexport function changeLanguage(lang: string): void {\n  if (lang === currentLanguage) return;\n  \n  // Only allow supported languages\n  if (!['en', 'de'].includes(lang)) return;\n  \n  currentLanguage = lang;\n  \n  // Save to localStorage\n  if (typeof window !== 'undefined') {\n    localStorage.setItem(STORAGE_KEY, lang);\n    document.documentElement.lang = lang;\n    \n    // Dispatch event for components to know language changed\n    const event = new CustomEvent('languageChanged', { detail: { language: lang } });\n    document.dispatchEvent(event);\n  }\n}\n\n/**\n * Get the current language\n */\nexport function getLanguage(): string {\n  return currentLanguage;\n}\n\n/**\n * Get a translation from the nested structure with dot notation\n * This is a safer implementation without eval()\n */\nfunction getTranslation(key: string, lang: string): string | undefined {\n  // Get correct namespace\n  const namespace = 'translation'; // We only use a single namespace\n  const resource = translations[lang]?.[namespace];\n  \n  if (!resource) return undefined;\n  \n  // Handle dot notation (e.g., \"header.title\")\n  const parts = key.split('.');\n  let current: unknown = resource;\n  \n  // Navigate down the object path\n  for (const part of parts) {\n    if (current === undefined || current === null || typeof current !== 'object') {\n      return undefined;\n    }\n    \n    // Type assertion since we've checked current is an object\n    current = (current as Record<string, unknown>)[part];\n  }\n  \n  // Return the found string or undefined\n  return typeof current === 'string' ? current : undefined;\n}\n\n/**\n * Replace {{key}} placeholders in a string with values\n */\nfunction replaceValues(text: string, values: Record<string, string | number>): string {\n  return text.replace(/\\{\\{([^{}]+)\\}\\}/g, (match, key) => {\n    const replacement = values[key.trim()];\n    return replacement !== undefined ? String(replacement) : match;\n  });\n}\n\n// Helper function to extract language from URL path\nexport function getLanguageFromPath(path: string): string | null {\n  if (!path) return null;\n  \n  const segments = path.split('/');\n  if (segments.length > 1 && ['en', 'de'].includes(segments[1])) {\n    return segments[1];\n  }\n  \n  return null;\n}\n\n// Simple functions to mimic i18next interface for easier migration\nexport const i18n = {\n  changeLanguage,\n  language: currentLanguage,\n  t\n};\n\n// Export a hook-like function for React components\nexport function useTranslation() {\n  return { \n    t,\n    i18n: {\n      language: currentLanguage,\n      changeLanguage\n    }\n  };\n} \n ","/**\r\n * Translation system entry point - 100% eval-free\r\n * This file replaces i18n-client.ts with a simpler implementation\r\n */\r\n\r\nimport { getLanguage } from './lib/translation';\r\n\r\nexport { \r\n  t,\r\n  i18n,\r\n  useTranslation,\r\n  changeLanguage,\r\n  getLanguage,\r\n  getLanguageFromPath\r\n} from './lib/translation';\r\n\r\n// Constants exported for backward compatibility with existing code\r\nexport const LANGUAGE_STORAGE_KEY = 'billingperiodallocator-language';\r\nexport const DEFAULT_LANGUAGE = 'en';\r\nexport const SUPPORTED_LANGUAGES = ['en', 'de'];\r\n\r\n// For backward compatibility with existing code\r\nexport const getCurrentLanguage = getLanguage; \r\n "],"names":["translations","en","translation","enTranslations","de","deTranslations","currentLanguage","STORAGE_KEY","pathSegments","window","location","pathname","split","length","includes","localStorage","getItem","navigator","language","substring","toLowerCase","t","key","optionsOrDefaultValue","values","options","defaultValue","finalText","getTranslation","lang","resource","namespace","undefined","parts","current","part","Object","keys","text","replace","match","replacement","trim","String","changeLanguage","setItem","document","documentElement","event","CustomEvent","detail","dispatchEvent","getLanguageFromPath","path","segments","i18n","useTranslation","LANGUAGE_STORAGE_KEY","getLanguage"],"sourceRoot":""}