{"version":3,"file":"static/chunks/6689-0b556c43a7a8115d.js","mappings":"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","sources":["webpack://_N_E/./src/lib/translation.ts","webpack://_N_E/./src/translations.ts","webpack://_N_E/./src/lib/language-service.ts","webpack://_N_E/./src/lib/utils.ts","webpack://_N_E/./src/components/translation-provider.tsx"],"sourcesContent":["/**\r\n * Simple, direct translation system with zero eval() usage\r\n * Now using language-service.ts for language management\r\n */\r\n\r\nimport { SupportedLanguage, getCurrentLanguage } from './language-service';\r\n\r\nimport { TranslationContext } from '../components/translation-provider';\r\nimport deTranslations from '../messages/de.json';\r\nimport enTranslations from '../messages/en.json';\r\nimport { safeText } from './utils';\r\nimport { useContext } from 'react';\r\n\r\n// Type safety for translation objects\r\ntype TranslationResource = Record<string, string | Record<string, string>>;\r\ntype NestedTranslations = Record<string, TranslationResource>;\r\n\r\ninterface TranslationOptions {\r\n  defaultValue?: string;\r\n  values?: Record<string, string | number>;\r\n}\r\n\r\n// Translations store\r\nconst translations: Record<string, NestedTranslations> = {\r\n  en: { translation: enTranslations as TranslationResource },\r\n  de: { translation: deTranslations as TranslationResource },\r\n};\r\n\r\n/**\r\n * Get a translated string with NO eval\r\n * Compatible with i18next API - accepts either options object or defaultValue string\r\n */\r\nexport function t(key: string, optionsOrDefaultValue?: TranslationOptions | string): string {\r\n  // Get current language from language service\r\n  const lang = getCurrentLanguage();\r\n  \r\n  let options: TranslationOptions = {};\r\n  \r\n  // Handle i18next compatibility where second param can be defaultValue string\r\n  if (typeof optionsOrDefaultValue === 'string') {\r\n    options = { defaultValue: optionsOrDefaultValue };\r\n  } else if (optionsOrDefaultValue) {\r\n    options = optionsOrDefaultValue;\r\n  }\r\n  \r\n  // Get the translation or default value\r\n  const translation = getTranslation(key, lang);\r\n  \r\n  // Ensure we always have a string, not an object (prevents React Error #418)\r\n  const finalText = safeText(translation || options.defaultValue || key);\r\n  \r\n  // Replace any {{key}} values\r\n  if (options.values && Object.keys(options.values).length > 0) {\r\n    return replaceValues(finalText, options.values);\r\n  }\r\n  \r\n  return finalText;\r\n}\r\n\r\n/**\r\n * Get a translation from the nested structure with dot notation\r\n * This is a safer implementation without eval()\r\n */\r\nfunction getTranslation(key: string, lang: SupportedLanguage): string | undefined {\r\n  // Get correct namespace\r\n  const namespace = 'translation'; // We only use a single namespace\r\n  const resource = translations[lang]?.[namespace];\r\n  \r\n  if (!resource) return undefined;\r\n  \r\n  // Handle dot notation (e.g., \"header.title\")\r\n  const parts = key.split('.');\r\n  let current: unknown = resource;\r\n  \r\n  // Navigate down the object path\r\n  for (const part of parts) {\r\n    if (current === undefined || current === null || typeof current !== 'object') {\r\n      return undefined;\r\n    }\r\n    \r\n    // Type assertion since we've checked current is an object\r\n    current = (current as Record<string, unknown>)[part];\r\n  }\r\n  \r\n  // Return the found string or undefined - but ensure it's a string\r\n  return typeof current === 'string' ? current : undefined;\r\n}\r\n\r\n/**\r\n * Replace {{key}} placeholders in a string with values\r\n */\r\nfunction replaceValues(text: string, values: Record<string, string | number>): string {\r\n  return text.replace(/\\{\\{([^{}]+)\\}\\}/g, (match, key) => {\r\n    const replacement = values[key.trim()];\r\n    // Ensure replacement is always a string\r\n    return replacement !== undefined ? safeText(replacement) : match;\r\n  });\r\n}\r\n\r\n// Simple i18n interface for compatibility with existing code\r\nexport const i18n = {\r\n  // Note: We're not actually changing language here, just getting the current one\r\n  changeLanguage: () => {\r\n    console.warn('This method is deprecated. Use the changeLanguage from language-service.ts instead');\r\n    return false;\r\n  },\r\n  language: getCurrentLanguage(),\r\n  t\r\n};\r\n\r\n// Export a hook-like function for React components\r\nexport function useTranslation() {\r\n  const { language, t: contextT, changeLanguage: contextChangeLanguage } = useContext(TranslationContext);\r\n\r\n  // The t function from context already uses the correct language.\r\n  // The changeLanguage function from context will update the provider and global state.\r\n  return { \r\n    t: contextT,\r\n    i18n: {\r\n      language: language, // Use language from context\r\n      changeLanguage: contextChangeLanguage // Use changeLanguage from context\r\n    }\r\n  };\r\n}\r\n\r\n// Enhanced Server-Side Translator function that gets language from params\r\nexport function getServerSideTranslator(lang: SupportedLanguage) {\r\n  return {\r\n    t: (key: string, optionsOrDefaultValue?: TranslationOptions | string): string => {\r\n      let options: TranslationOptions = {};\r\n      if (typeof optionsOrDefaultValue === 'string') {\r\n        options = { defaultValue: optionsOrDefaultValue };\r\n      } else if (optionsOrDefaultValue) {\r\n        options = optionsOrDefaultValue;\r\n      }\r\n\r\n      const translation = getTranslation(key, lang); // Use the passed 'lang'\r\n      const finalText = safeText(translation || options.defaultValue || key);\r\n\r\n      if (options.values && Object.keys(options.values).length > 0) {\r\n        return replaceValues(finalText, options.values);\r\n      }\r\n      return finalText;\r\n    },\r\n    language: lang // Expose the language for consistency\r\n  };\r\n} \r\n ","/**\r\n * Translation system entry point - 100% eval-free\r\n * This file exports from language-service.ts and lib/translation.ts for backward compatibility\r\n */\r\n\r\n// Import getCurrentLanguage specifically first\r\n\r\nimport { getCurrentLanguage } from './lib/language-service';\r\n\r\n// Export these from language-service (the new central location)\r\nexport { \r\n  SUPPORTED_LANGUAGES,\r\n  DEFAULT_LANGUAGE as DEFAULT_LANGUAGE,\r\n  LANGUAGE_STORAGE_KEY,\r\n  getCurrentLanguage,\r\n  changeLanguage,\r\n  getLanguageFromPath\r\n} from './lib/language-service';\r\n\r\n// Export translation functions from translation.ts\r\nexport { \r\n  t,\r\n  i18n,\r\n  useTranslation\r\n} from './lib/translation';\r\n\r\n// For backward compatibility with existing code\r\nexport const getLanguage = getCurrentLanguage; \r\n ","/**\r\n * Language Service - Single source of truth for language management\r\n * This service centralizes all language-related logic in one place\r\n */\r\n\r\n// Language-related constants\r\nexport const SUPPORTED_LANGUAGES = ['en', 'de'] as const;\r\nexport type SupportedLanguage = typeof SUPPORTED_LANGUAGES[number];\r\nexport const DEFAULT_LANGUAGE: SupportedLanguage = 'en';\r\nexport const LANGUAGE_COOKIE_NAME = 'NEXT_LOCALE';\r\nexport const LANGUAGE_STORAGE_KEY = 'billingperiodallocator-language';\r\n\r\n// Store the current language in memory\r\nlet currentLanguage: SupportedLanguage = DEFAULT_LANGUAGE;\r\n\r\n/**\r\n * Detect user's preferred language based on different sources\r\n * Order of precedence:\r\n * 1. URL path language segment\r\n * 2. Cookie\r\n * 3. Local storage\r\n * 4. Browser language\r\n * 5. Default language (en)\r\n */\r\nexport function detectLanguage(): SupportedLanguage {\r\n  if (typeof window === 'undefined') {\r\n    // Server-side - can't detect much, will rely on Next.js params\r\n    return currentLanguage;\r\n  }\r\n\r\n  // Client-side detection (hydration phase)\r\n  \r\n  // 1. First priority: Get language from URL path\r\n  const pathSegments = window.location.pathname.split('/');\r\n  const urlLang = pathSegments.length > 1 && \r\n    SUPPORTED_LANGUAGES.includes(pathSegments[1] as SupportedLanguage)\r\n      ? pathSegments[1] as SupportedLanguage\r\n      : null;\r\n  \r\n  // 2. Second priority: Check cookies\r\n  const getCookie = (name: string): string | null => {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop()?.split(';').shift() || null;\r\n    return null;\r\n  };\r\n  const cookieLang = getCookie(LANGUAGE_COOKIE_NAME);\r\n  \r\n  // 3. Third priority: Check localStorage\r\n  const storedLang = localStorage.getItem(LANGUAGE_STORAGE_KEY);\r\n  \r\n  // 4. Fourth priority: Check browser language\r\n  const browserLang = navigator.language && \r\n    SUPPORTED_LANGUAGES.includes(navigator.language.substring(0, 2).toLowerCase() as SupportedLanguage)\r\n      ? navigator.language.substring(0, 2).toLowerCase() as SupportedLanguage\r\n      : null;\r\n  \r\n  // Use best source available\r\n  const detectedLang = (\r\n    (urlLang && SUPPORTED_LANGUAGES.includes(urlLang) ? urlLang : null) ||\r\n    (cookieLang && SUPPORTED_LANGUAGES.includes(cookieLang as SupportedLanguage) ? cookieLang as SupportedLanguage : null) ||\r\n    (storedLang && SUPPORTED_LANGUAGES.includes(storedLang as SupportedLanguage) ? storedLang as SupportedLanguage : null) ||\r\n    (browserLang && SUPPORTED_LANGUAGES.includes(browserLang) ? browserLang : null) ||\r\n    DEFAULT_LANGUAGE\r\n  );\r\n\r\n  // Update storage if URL language differs\r\n  if (urlLang && storedLang !== urlLang) {\r\n    localStorage.setItem(LANGUAGE_STORAGE_KEY, urlLang);\r\n  }\r\n  \r\n  return detectedLang;\r\n}\r\n\r\n/**\r\n * Initialize the language service (call once during app startup)\r\n */\r\nexport function initializeLanguage(initialLanguage?: SupportedLanguage): void {\r\n  // Set the initial language if provided (usually from URL/server)\r\n  if (initialLanguage && SUPPORTED_LANGUAGES.includes(initialLanguage)) {\r\n    currentLanguage = initialLanguage;\r\n  } else {\r\n    // Otherwise detect from available sources\r\n    currentLanguage = detectLanguage();\r\n  }\r\n\r\n  // Set html attributes for accessibility and styling\r\n  if (typeof document !== 'undefined') {\r\n    document.documentElement.lang = currentLanguage;\r\n    document.documentElement.setAttribute('data-lang', currentLanguage);\r\n    document.documentElement.classList.add(`lang-${currentLanguage}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Get the current language\r\n */\r\nexport function getCurrentLanguage(): SupportedLanguage {\r\n  // Force detection if not yet initialized\r\n  if (!currentLanguage) {\r\n    currentLanguage = detectLanguage();\r\n  }\r\n  return currentLanguage;\r\n}\r\n\r\n/**\r\n * Set a cookie for language persistence\r\n */\r\nexport function setLanguageCookie(lang: SupportedLanguage, days: number = 365): void {\r\n  if (typeof document === 'undefined') return;\r\n  \r\n  const date = new Date();\r\n  date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n  const expires = `; expires=${date.toUTCString()}`;\r\n  document.cookie = `${LANGUAGE_COOKIE_NAME}=${lang}${expires}; path=/; SameSite=Lax`;\r\n  \r\n  // Also set application-specific cookie for backward compatibility\r\n  document.cookie = `${LANGUAGE_STORAGE_KEY}=${lang}${expires}; path=/; SameSite=Lax`;\r\n}\r\n\r\n/**\r\n * Change the language and update all storage locations\r\n */\r\nexport function changeLanguage(lang: SupportedLanguage, options: { navigate?: boolean } = {}): boolean {\r\n  // Validate language\r\n  if (!SUPPORTED_LANGUAGES.includes(lang)) {\r\n    console.warn(`Attempted to change to unsupported language: ${lang}`);\r\n    return false;\r\n  }\r\n\r\n  // Skip if same language\r\n  if (lang === currentLanguage) return false;\r\n  \r\n  // Update in-memory value\r\n  currentLanguage = lang;\r\n  \r\n  // Client-side updates\r\n  if (typeof window !== 'undefined') {\r\n    // Update storage\r\n    localStorage.setItem(LANGUAGE_STORAGE_KEY, lang);\r\n    setLanguageCookie(lang);\r\n    \r\n    // Update HTML attributes\r\n    document.documentElement.lang = lang;\r\n    document.documentElement.setAttribute('data-lang', lang);\r\n    \r\n    // Remove old language classes and add new one\r\n    SUPPORTED_LANGUAGES.forEach(l => {\r\n      document.documentElement.classList.remove(`lang-${l}`);\r\n    });\r\n    document.documentElement.classList.add(`lang-${lang}`);\r\n    \r\n    // Notify components via custom event\r\n    const event = new CustomEvent('languageChanged', { \r\n      detail: { language: lang } \r\n    });\r\n    document.dispatchEvent(event);\r\n    \r\n    // Handle navigation if requested\r\n    if (options.navigate) {\r\n      const pathname = window.location.pathname;\r\n      const pathSegments = pathname.split('/');\r\n      \r\n      if (pathSegments.length > 1 && SUPPORTED_LANGUAGES.includes(pathSegments[1] as SupportedLanguage)) {\r\n        // Replace language segment in URL\r\n        pathSegments[1] = lang;\r\n        const newPath = pathSegments.join('/');\r\n        window.location.href = newPath;\r\n      } else {\r\n        // Add language segment if missing\r\n        window.location.href = `/${lang}${pathname}`;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\n/**\r\n * Extract language from URL path\r\n */\r\nexport function getLanguageFromPath(path: string): SupportedLanguage | null {\r\n  if (!path) return null;\r\n  \r\n  const segments = path.split('/');\r\n  if (segments.length > 1 && SUPPORTED_LANGUAGES.includes(segments[1] as SupportedLanguage)) {\r\n    return segments[1] as SupportedLanguage;\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n/**\r\n * Generate a URL with the specified language\r\n */\r\nexport function getLanguageUrl(lang: SupportedLanguage, path: string): string {\r\n  if (!path) return `/${lang}/`;\r\n  \r\n  // Extract current path without language\r\n  const segments = path.split('/');\r\n  const currentLang = segments.length > 1 && \r\n    SUPPORTED_LANGUAGES.includes(segments[1] as SupportedLanguage) \r\n      ? segments[1] \r\n      : null;\r\n  \r\n  if (currentLang) {\r\n    // Replace language in path\r\n    segments[1] = lang;\r\n    return segments.join('/');\r\n  } else {\r\n    // Add language to path\r\n    return `/${lang}${path}`;\r\n  }\r\n}\r\n\r\n// Initialize language detection on import (server-side)\r\n// Client-side will initialize via Provider\r\nif (typeof window === 'undefined') {\r\n  initializeLanguage();\r\n} \r\n","import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n/**\r\n * Safely converts any value to a string to prevent React error #418\r\n * This helps when displaying dynamic content that might be objects\r\n */\r\nexport function safeText(value: unknown): string {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n  \r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  \r\n  if (typeof value === 'object') {\r\n    try {\r\n      return JSON.stringify(value);\r\n    } catch {\r\n      return '[Object]';\r\n    }\r\n  }\r\n  \r\n  return String(value);\r\n}\r\n","'use client';\r\n\r\nimport React, { createContext, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n  SupportedLanguage,\r\n  changeLanguage,\r\n  getCurrentLanguage,\r\n  getLanguageFromPath,\r\n  initializeLanguage\r\n} from '@/lib/language-service';\r\n\r\nimport { t as globalT } from '@/translations';\r\nimport { usePathname } from 'next/navigation';\r\n\r\n// Define the shape of the context value\r\ninterface ITranslationContext {\r\n  language: SupportedLanguage;\r\n  t: typeof globalT;\r\n  changeLanguage: typeof changeLanguage;\r\n}\r\n\r\n// Default context values\r\nconst defaultContextValue: ITranslationContext = {\r\n  language: 'en',\r\n  t: (key: string, optionsOrDefaultValue?: Parameters<typeof globalT>[1]): string => {\r\n    const optionsAsObject = typeof optionsOrDefaultValue === 'object' ? optionsOrDefaultValue : undefined;\r\n    const defaultValueAsString = typeof optionsOrDefaultValue === 'string' ? optionsOrDefaultValue : undefined;\r\n\r\n    if (optionsAsObject?.defaultValue) {\r\n      return optionsAsObject.defaultValue;\r\n    }\r\n    if (defaultValueAsString) {\r\n      return defaultValueAsString;\r\n    }\r\n    return key;\r\n  },\r\n  changeLanguage: () => false, // No-op - user should use navigation instead\r\n};\r\n\r\n// Initialize context with safe default values\r\nexport const TranslationContext = createContext<ITranslationContext>(defaultContextValue);\r\n\r\nexport default function TranslationProvider({ children }: { children: React.ReactNode }) {\r\n  const pathname = usePathname() || '';\r\n  \r\n  // Get language from path - the authoritative source\r\n  const pathLanguage = getLanguageFromPath(pathname);\r\n  \r\n  // State to hold current language, initialize from path\r\n  const [contextLang, setContextLang] = useState<SupportedLanguage>(\r\n    pathLanguage || getCurrentLanguage()\r\n  );\r\n\r\n  // Initialize language service on mount\r\n  useEffect(() => {\r\n    if (pathLanguage) {\r\n      // Initialize with path language if available (URL is the source of truth)\r\n      initializeLanguage(pathLanguage);\r\n      setContextLang(pathLanguage);\r\n    } else {\r\n      // Use whatever language service detects otherwise\r\n      const detectedLang = getCurrentLanguage();\r\n      setContextLang(detectedLang);\r\n    }\r\n  }, [pathLanguage]);\r\n\r\n  // Update language when path changes\r\n  useEffect(() => {\r\n    if (pathLanguage && pathLanguage !== contextLang) {\r\n      // Update language service and context state\r\n      initializeLanguage(pathLanguage);\r\n      setContextLang(pathLanguage);\r\n    }\r\n  }, [pathname, contextLang, pathLanguage]);\r\n\r\n  // Listen for language change events\r\n  useEffect(() => {\r\n    const handleLanguageChanged = (e: Event) => {\r\n      const customEvent = e as CustomEvent;\r\n      const newLang = customEvent.detail?.language as SupportedLanguage;\r\n      \r\n      if (newLang && newLang !== contextLang) {\r\n        setContextLang(newLang);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('languageChanged', handleLanguageChanged);\r\n    return () => {\r\n      document.removeEventListener('languageChanged', handleLanguageChanged);\r\n    };\r\n  }, [contextLang]);\r\n\r\n  // Wrap the language service's changeLanguage to include navigation\r\n  const handleChangeLanguage = (lang: SupportedLanguage): boolean => {\r\n    return changeLanguage(lang, { navigate: true });\r\n  };\r\n\r\n  // Memoize the context value to avoid unnecessary re-renders\r\n  const providerValue = useMemo(() => ({\r\n    language: contextLang,\r\n    t: globalT,\r\n    changeLanguage: handleChangeLanguage,\r\n  }), [contextLang]);\r\n\r\n  return (\r\n    <TranslationContext.Provider value={providerValue}>\r\n      {children}\r\n    </TranslationContext.Provider>\r\n  );\r\n} \r\n "],"names":["translations","en","translation","enTranslations","de","deTranslations","t","key","optionsOrDefaultValue","lang","getCurrentLanguage","options","defaultValue","getTranslation","resource","namespace","undefined","parts","split","current","part","finalText","safeText","values","Object","keys","length","replaceValues","text","replace","match","replacement","trim","useTranslation","language","contextT","changeLanguage","contextChangeLanguage","useContext","TranslationContext","i18n","SUPPORTED_LANGUAGES","detectLanguage","DEFAULT_LANGUAGE","pathSegments","window","location","pathname","urlLang","includes","cookieLang","getCookie","value","document","cookie","name","pop","shift","LANGUAGE_COOKIE_NAME","storedLang","localStorage","getItem","LANGUAGE_STORAGE_KEY","browserLang","navigator","substring","toLowerCase","detectedLang","setItem","initializeLanguage","initialLanguage","currentLanguage","documentElement","setAttribute","classList","add","console","warn","setLanguageCookie","days","date","Date","setTime","getTime","toUTCString","expires","forEach","l","remove","event","CustomEvent","detail","dispatchEvent","navigate","newPath","join","href","getLanguageFromPath","path","segments","cn","inputs","twMerge","clsx","JSON","stringify","String","createContext","optionsAsObject","defaultValueAsString","TranslationProvider","children","usePathname","pathLanguage","contextLang","setContextLang","useState","useEffect","handleLanguageChanged","newLang","e","addEventListener","removeEventListener","handleChangeLanguage","providerValue","useMemo","globalT","Provider"],"sourceRoot":""}